generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  email           String           @unique
  name            String?
  role            UserRole         @default(USER)
  avatar          String?
  emailVerified   DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  accounts        Account[]
  agentExecutions AgentExecution[]
  analytics       Analytics[]
  campaigns       Campaign[]
  sessions        Session[]
  agentMemories   AgentMemory[]
  copilotSessions CopilotSession[]

  // New relations for campaign and agent management
  createdCampaigns Campaign[]      @relation("CampaignCreator")
  assignedAgents  Agent[]          @relation("AgentAssignee")

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Campaign {
  id              String           @id @default(cuid())
  name            String
  description     String?
  type            CampaignType
  status          CampaignStatus   @default(DRAFT)
  budget          Float?
  startDate       DateTime?
  endDate         DateTime?
  targetAudience  Json?
  platforms       Platform[]
  metrics         Json?
  settings        Json?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  userId          String
  abTests         ABTest[]
  agentExecutions AgentExecution[]
  analytics       Analytics[]
  campaignMetrics CampaignMetric[]
  user            User             @relation(fields: [userId], references: [id])
  b2bLeads        B2BLead[]
  outreachHistory OutreachHistory[]
  billingLogs     BillingLog[]
  campaignCost    CampaignCost?
  
  // New many-to-many relationship with agents
  agents          Agent[]          @relation("CampaignAgents")
  createdBy       User?            @relation("CampaignCreator", fields: [createdById], references: [id])
  createdById     String?

  // New relations for launch intelligence
  executionMetrics   CampaignExecutionMetric[]
  sentimentAnalysis  SentimentAnalysis[]
  leadQualityMetrics LeadQualityMetric[]
  budgetPacing       BudgetPacing[]
  launchAlerts       LaunchAlert[]
  budgetOptimizations BudgetOptimization[]
  
  // Launch configuration
  launchDate         DateTime?
  targetRegion       String?  @default("UAE")
  targetLanguages    String[] @default(["ar", "en"])
  dailyBudgetPlan    Float?
  roiTarget          Float?   @default(2.0)

  // SEO Agent relations
  seoEntries         SEOEntry[]
  keywordSuggestions KeywordSuggestion[]
  seoAnalyses        SEOAnalysis[]
  seoAlerts          SEOAlert[]
  
  // Cross-agent analytics relations
  agentMetrics       AgentMetric[]

  // Action and learning system relations
  agentActionLogs    AgentActionLog[]
  metricWeights      MetricWeight[]
  chainExecutions    ChainExecution[]

  @@map("campaigns")
}

model CampaignMetric {
  id          String   @id @default(cuid())
  impressions Int      @default(0)
  ctr         Float    @default(0.0)
  conversions Int      @default(0)
  timestamp   DateTime @default(now())
  campaignId  String
  campaign    Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@map("campaign_metrics")
}

model AIEventLog {
  id        String   @id @default(cuid())
  agent     String
  action    String
  metadata  Json?
  createdAt DateTime @default(now())

  @@map("ai_event_logs")
}

model TrendSignal {
  id          String   @id @default(cuid())
  source      String   // 'tiktok', 'instagram', 'twitter'
  keyword     String
  signalType  String   // 'hashtag', 'sound', 'topic'
  score       Float
  metadata    Json?
  detectedAt  DateTime @default(now())
  region      String?
  createdAt   DateTime @default(now())

  @@index([keyword])
  @@map("trend_signals")
}

model RegionScore {
  id        String   @id @default(cuid())
  region    String
  platform  String
  score     Float
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@unique([region, platform])
  @@map("region_scores")
}

model B2BLead {
  id              String   @id @default(cuid())
  email           String   @unique
  firstName       String?
  lastName        String?
  company         String?
  position        String?
  linkedinUrl     String?
  phone           String?
  website         String?
  industry        String?
  companySize     String?
  location        String?
  source          String   // 'linkedin', 'directory', 'manual'
  status          String   @default("new") // 'new', 'contacted', 'qualified', 'converted'
  score           Float?   // Lead scoring
  lastContactAt   DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  campaigns       Campaign[]
  outreachHistory OutreachHistory[]

  // New relations
  qualityMetrics     LeadQualityMetric[]

  @@map("b2b_leads")
}

model OutreachHistory {
  id          String   @id @default(cuid())
  leadId      String
  campaignId  String?
  type        String   // 'email', 'linkedin', 'call'
  subject     String?
  content     String?
  status      String   // 'sent', 'opened', 'replied', 'bounced'
  sentAt      DateTime @default(now())
  openedAt    DateTime?
  repliedAt   DateTime?

  // Relations
  lead        B2BLead   @relation(fields: [leadId], references: [id], onDelete: Cascade)
  campaign    Campaign? @relation(fields: [campaignId], references: [id])

  @@map("outreach_history")
}

model Agent {
  id           String           @id @default(cuid())
  name         String
  type         AgentType
  status       AgentStatus      @default(ACTIVE)
  capabilities Json?
  settings     Json?
  version      String           @default("1.0.0")
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  executions   AgentExecution[]
  
  // New many-to-many relationship with campaigns
  campaigns    Campaign[]       @relation("CampaignAgents")
  assignedTo   User?            @relation("AgentAssignee", fields: [assignedToId], references: [id])
  assignedToId String?

  @@map("agents")
}

model AgentExecution {
  id          String          @id @default(cuid())
  agentId     String
  campaignId  String?
  userId      String?
  task        String
  payload     Json?
  result      Json?
  status      ExecutionStatus @default(PENDING)
  performance Float?
  error       String?
  startedAt   DateTime        @default(now())
  completedAt DateTime?
  metadata    Json?
  agent       Agent           @relation(fields: [agentId], references: [id])
  campaign    Campaign?       @relation(fields: [campaignId], references: [id])
  user        User?           @relation(fields: [userId], references: [id])

  @@map("agent_executions")
}

model Analytics {
  id         String        @id @default(cuid())
  campaignId String?
  userId     String?
  type       AnalyticsType
  data       Json
  period     String?
  date       DateTime      @default(now())
  metadata   Json?
  campaign   Campaign?     @relation(fields: [campaignId], references: [id])
  user       User?         @relation(fields: [userId], references: [id])

  @@map("analytics")
}

model ABTest {
  id          String       @id @default(cuid())
  campaignId  String
  name        String
  description String?
  status      ABTestStatus @default(RUNNING)
  variants    Json
  results     Json?
  winner      String?
  confidence  Float?
  startDate   DateTime     @default(now())
  endDate     DateTime?
  settings    Json?
  campaign    Campaign     @relation(fields: [campaignId], references: [id])

  @@map("ab_tests")
}

model Content {
  id          String        @id @default(cuid())
  title       String
  type        ContentType
  platform    Platform
  content     Json
  status      ContentStatus @default(DRAFT)
  performance Json?
  metadata    Json?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("contents")
}

model Lead {
  id        String     @id @default(cuid())
  email     String
  name      String?
  company   String?
  position  String?
  phone     String?
  source    String?
  status    LeadStatus @default(NEW)
  score     Float?
  tags      String[]
  metadata  Json?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("leads")
}

model Trend {
  id               String   @id @default(cuid())
  keyword          String
  platform         Platform
  category         String?
  title            String?  // Human-readable trend title
  description      String?  // Brief description of the trend
  
  // Scoring metrics
  viralityScore    Float    @default(0.0) // 0-100 virality score
  relevanceScore   Float    @default(0.0) // 0-100 relevance score
  opportunityScore Float    @default(0.0) // 0-100 opportunity score
  overallScore     Float    @default(0.0) // 0-100 weighted overall score
  
  // Engagement metrics
  volume           Int?     @default(0)
  growth           Float?   @default(0.0) // Growth percentage
  engagement       Int?     @default(0)
  shares           Int?     @default(0)
  likes            Int?     @default(0)
  comments         Int?     @default(0)
  
  // Geographic and demographic data
  region           String?  @default("global")
  country          String?
  language         String?  @default("en")
  ageGroup         String?  // "13-18", "19-25", "26-35", etc.
  gender           String?  // "male", "female", "all"
  
  // Trend metadata
  tags             String[] // Associated hashtags, keywords
  sourceUrl        String?  // Original source URL
  influencers      Json?    // Key influencers driving the trend
  relatedKeywords  Json?    // Related trending keywords
  
  // AI analysis
  aiExplanation    String?  @db.Text // AI-generated explanation of trend significance
  campaignRelevance Json?   // Which campaigns this trend is relevant to
  contentSuggestions Json?  // AI-generated content suggestions
  
  // Status and lifecycle
  status           String   @default("active") // "active", "declining", "expired"
  peakDate         DateTime? // When the trend peaked
  expiresAt        DateTime? // When trend is expected to expire
  
  // Original data and metadata
  data             Json     // Raw trend data from platforms
  metadata         Json?    // Additional metadata (API response, processing info)
  
  // Tracking
  detectedAt       DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  trendScores      TrendScore[]
  
  @@index([keyword])
  @@index([platform])
  @@index([overallScore])
  @@index([region])
  @@index([status])
  @@index([detectedAt])
  @@index([updatedAt])
  @@map("trends")
}

model TrendScore {
  id            String   @id @default(cuid())
  trendId       String
  
  // Daily snapshot scores
  viralityScore    Float    @default(0.0)
  relevanceScore   Float    @default(0.0)
  opportunityScore Float    @default(0.0)
  overallScore     Float    @default(0.0)
  
  // Daily metrics
  volume           Int      @default(0)
  engagement       Int      @default(0)
  growth           Float    @default(0.0)
  momentum         Float    @default(0.0) // Rate of change
  
  // Comparative analysis
  scoreChange      Float    @default(0.0) // Change from previous day
  volumeChange     Float    @default(0.0) // Volume change percentage
  ranking          Int?     // Ranking among all trends for this day
  
  // Forecast data
  predictedGrowth  Float?   // Predicted growth for next period
  confidenceLevel  Float?   @default(0.0) // Confidence in predictions (0-1)
  
  // Snapshot metadata
  date             DateTime @default(now())
  hour             Int?     @default(0) // Hour of day for hourly snapshots
  region           String?  @default("global")
  
  // Relations
  trend            Trend    @relation(fields: [trendId], references: [id], onDelete: Cascade)
  
  @@unique([trendId, date, hour])
  @@index([trendId])
  @@index([date])
  @@index([overallScore])
  @@index([region])
  @@map("trend_scores")
}

model DesignTemplate {
  id        String   @id @default(cuid())
  name      String
  category  String
  template  Json
  preview   String?
  tags      String[]
  usage     Int      @default(0)
  rating    Float?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("design_templates")
}

model EmailCampaign {
  id         String              @id @default(cuid())
  name       String
  subject    String
  content    Json
  recipients Json
  status     EmailCampaignStatus @default(DRAFT)
  scheduleAt DateTime?
  sentAt     DateTime?
  openRate   Float?
  clickRate  Float?
  bounceRate Float?
  metadata   Json?
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt

  @@map("email_campaigns")
}

model SocialSchedule {
  id          String           @id @default(cuid())
  platform    Platform
  content     Json
  caption     String?
  scheduledAt DateTime
  publishedAt DateTime?
  status      SocialPostStatus @default(SCHEDULED)
  engagement  Json?
  reach       Int?
  impressions Int?
  metadata    Json?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@map("social_schedules")
}

model SupportTicket {
  id           String          @id @default(cuid())
  ticketId     String          @unique
  customer     Json
  subject      String
  priority     SupportPriority @default(MEDIUM)
  status       SupportStatus   @default(OPEN)
  channel      SupportChannel
  messages     Json
  assignedTo   String?
  resolution   String?
  satisfaction Float?
  resolvedAt   DateTime?
  metadata     Json?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  @@map("support_tickets")
}

enum UserRole {
  USER
  ADMIN
  MANAGER
  SUPER_ADMIN
  VIEWER
}

enum CampaignType {
  CONTENT_GENERATION
  AD_OPTIMIZATION
  B2B_OUTREACH
  TREND_ANALYSIS
  DESIGN_GENERATION
  SOCIAL_MEDIA
  EMAIL
  ADS
  CONTENT
  INFLUENCER
  EVENT
  PRODUCT_LAUNCH
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  FAILED
  CANCELLED
}

enum Platform {
  FACEBOOK
  INSTAGRAM
  TIKTOK
  TWITTER
  LINKEDIN
  YOUTUBE
  EMAIL
  WEBSITE
  SHOPIFY
  GOOGLE_ADS
  META_ADS
}

enum AgentType {
  CONTENT
  SEO
  EMAIL_MARKETING
  SOCIAL_POSTING
  CUSTOMER_SUPPORT
  AD
  OUTREACH
  TREND
  INSIGHT
  DESIGN
  BRAND_VOICE
  GOAL_PLANNER
  PATTERN_MINER
  SEGMENT_ANALYZER
  SYSTEM
}

enum AgentStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  DEPRECATED
}

enum ExecutionStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum AnalyticsType {
  ENGAGEMENT
  REACH
  CONVERSION
  REVENUE
  CLICKS
  IMPRESSIONS
  SENTIMENT
  PERFORMANCE
}

enum ABTestStatus {
  DRAFT
  RUNNING
  COMPLETED
  STOPPED
}

enum ContentType {
  POST
  STORY
  REEL
  VIDEO
  EMAIL
  AD
  BLOG
  PRODUCT
}

enum ContentStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  ARCHIVED
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  CONVERTED
  LOST
}

enum EmailCampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  PAUSED
  CANCELLED
  FAILED
}

enum SocialPostStatus {
  DRAFT
  SCHEDULED
  PUBLISHING
  PUBLISHED
  FAILED
  CANCELLED
}

enum SupportPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum SupportStatus {
  OPEN
  IN_PROGRESS
  PENDING_CUSTOMER
  RESOLVED
  CLOSED
}

enum SupportChannel {
  WHATSAPP
  EMAIL
  CHAT
  PHONE
  SOCIAL
}

model BrandVoice {
  id            String   @id @default(cuid())
  name          String
  description   String?
  guidelines    Json
  keywords      String[]
  toneProfile   Json
  isActive      Boolean  @default(true)
  version       String   @default("1.0")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  analysisData  Json?
  sampleContent Json?
  analyses      BrandVoiceAnalysis[]

  @@map("brand_voices")
}

model BrandVoiceAnalysis {
  id           String     @id @default(cuid())
  brandVoiceId String
  contentId    String?
  contentType  String
  originalText String
  voiceScore   Float
  suggestions  Json
  analyzedAt   DateTime   @default(now())
  metadata     Json?
  brandVoice   BrandVoice @relation(fields: [brandVoiceId], references: [id], onDelete: Cascade)

  @@map("brand_voice_analyses")
}

model AgentMemory {
  id            String   @id @default(cuid())
  agentId       String
  sessionId     String
  userId        String?
  input         Json
  output        Json
  timestamp     DateTime @default(now())
  score         Int?
  tokensUsed    Int      @default(0)
  cost          Float    @default(0.0)
  executionTime Int      @default(0) // milliseconds
  success       Boolean  @default(true)
  errorMessage  String?
  metadata      Json?
  user          User?    @relation(fields: [userId], references: [id])

  @@index([agentId])
  @@index([sessionId])
  @@index([userId])
  @@index([timestamp])
  @@map("agent_memory")
}

model CrossCampaignMemory {
  id              String   @id @default(cuid())
  summary         String
  winningVariants Json
  patternScore    Int
  segments        Json
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("cross_campaign_memory")
}

// Multi-Agent Reasoning Mesh Models
model GoalPlan {
  id              String            @id @default(cuid())
  title           String
  description     String
  priority        PlanPriority      @default(MEDIUM)
  status          PlanStatus        @default(PLANNING)
  targetMetrics   Json              // { "conversions": 20, "timeframe": "30_days" }
  subgoals        Json              // Array of decomposed subgoals
  agentSequence   Json              // Array of agent assignments and order
  brandAlignment  Float             @default(0.0) // 0-1 score
  feasibility     Float             @default(0.0) // 0-1 score
  confidence      Float             @default(0.0) // 0-1 score
  estimatedCost   Float?
  estimatedTime   Int?              // minutes
  metadata        Json?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  executions      PlanExecution[]
  consensusRounds AgentConsensus[]
  sharedIntents   SharedIntent[]

  @@map("goal_plans")
}

model SharedIntent {
  id          String      @id @default(cuid())
  goalPlanId  String?
  agentId     String
  agentType   AgentType
  intention   String      // "generate_content", "optimize_seo", etc.
  resources   Json        // Required resources: time, budget, dependencies
  priority    Int         @default(5) // 1-10 scale
  constraints Json?       // Scheduling, resource constraints
  status      IntentStatus @default(PROPOSED)
  confidence  Float       @default(0.0) // Agent's confidence in success
  estimatedDuration Int?  // minutes
  dependencies Json?      // Array of other intent IDs this depends on
  metadata    Json?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  goalPlan    GoalPlan?   @relation(fields: [goalPlanId], references: [id])

  @@index([agentId])
  @@index([agentType])
  @@index([status])
  @@map("shared_intents")
}

model AgentConsensus {
  id            String         @id @default(cuid())
  goalPlanId    String
  roundNumber   Int
  proposedPlan  Json           // The plan being voted on
  participantAgents Json       // Array of agent IDs
  votes         Json           // { "agentId": { "score": 0.8, "reasoning": "..." } }
  quorum        Float          @default(0.7) // Required agreement threshold
  result        ConsensusResult @default(PENDING)
  finalScore    Float?         // Weighted average of votes
  winningPlan   Json?          // Accepted plan details
  metadata      Json?
  createdAt     DateTime       @default(now())
  completedAt   DateTime?
  goalPlan      GoalPlan       @relation(fields: [goalPlanId], references: [id])

  @@index([goalPlanId])
  @@map("agent_consensus")
}

model PlanExecution {
  id              String           @id @default(cuid())
  goalPlanId      String
  executionPhase  Int              @default(1) // Which phase of the plan
  currentStep     Int              @default(0) // Current step within phase
  totalSteps      Int              @default(1)
  assignedAgent   String           // Agent ID currently executing
  agentType       AgentType
  status          ExecutionStatus  @default(PENDING)
  startedAt       DateTime?
  completedAt     DateTime?
  results         Json?            // Execution results/outputs
  performance     Float?           // 0-1 performance score
  errors          Json?            // Array of error objects
  fallbacksUsed   Json?            // Array of fallback strategies applied
  replannedAt     DateTime?        // When replanning was triggered
  replannedBy     String?          // Agent that triggered replanning
  metadata        Json?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  goalPlan        GoalPlan         @relation(fields: [goalPlanId], references: [id])

  @@index([goalPlanId])
  @@index([assignedAgent])
  @@index([status])
  @@map("plan_executions")
}

// Enums for Multi-Agent Reasoning Mesh
enum PlanPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum PlanStatus {
  PLANNING
  CONSENSUS
  APPROVED
  EXECUTING
  COMPLETED
  FAILED
  CANCELLED
  REPLANNING
}

enum IntentStatus {
  PROPOSED
  REVIEWING
  APPROVED
  EXECUTING
  COMPLETED
  FAILED
  WITHDRAWN
}

enum ConsensusResult {
  PENDING
  APPROVED
  REJECTED
  QUORUM_NOT_MET
  TIMEOUT
}

// Copilot Session Analytics & Replay Models
model CopilotSession {
  id                String             @id @default(cuid())
  sessionId         String             @unique
  userId            String?
  title             String?
  status            SessionStatus      @default(ACTIVE)
  
  // Session metadata
  startedAt         DateTime           @default(now())
  lastActivity      DateTime           @default(now())
  endedAt           DateTime?
  duration          Int?               // Total session duration in seconds
  
  // Analytics data
  totalMessages     Int                @default(0)
  userMessages      Int                @default(0)
  agentMessages     Int                @default(0)
  commandsExecuted  Int                @default(0)
  tasksCompleted    Int                @default(0)
  
  // Session quality metrics
  averageConfidence Float              @default(0.0)
  satisfactionScore Float?             // User feedback score 1-10
  outcomeAchieved   Boolean            @default(false)
  
  // Context and preferences
  context           Json?
  preferences       Json?
  metadata          Json?
  
  // Relations
  logs              CopilotLog[]
  user              User?              @relation(fields: [userId], references: [id])
  
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@index([userId, status])
  @@index([startedAt])
  @@index([sessionId])
  @@map("copilot_sessions")
}

model CopilotLog {
  id                String             @id @default(cuid())
  sessionId         String
  messageId         String             @unique
  
  // Message details
  role              MessageRole
  messageType       MessageType        @default(QUERY)
  content           String             @db.Text
  input             String?            @db.Text
  
  // AI processing data
  confidence        Float              @default(0.0)
  processingTime    Int                @default(0) // milliseconds
  tokensUsed        Int                @default(0)
  cost              Float              @default(0.0)
  
  // Intent and actions
  intent            Json?              // Parsed intent from message
  suggestedActions  Json?              // Array of suggested actions
  executionPlan     Json?              // Step-by-step execution plan
  attachments       Json?              // Files, reports, charts attached
  
  // Context and results
  context           Json?              // Context passed with message
  results           Json?              // Execution results if any
  error             String?            // Error message if failed
  
  // Analytics flags
  isCommandExecution Boolean           @default(false)
  isAutonomous      Boolean            @default(false)
  wasSuccessful     Boolean            @default(true)
  requiresApproval  Boolean            @default(false)
  
  // Relations
  session           CopilotSession     @relation(fields: [sessionId], references: [sessionId], onDelete: Cascade)
  
  createdAt         DateTime           @default(now())

  @@index([sessionId, createdAt])
  @@index([messageType, createdAt])
  @@index([isCommandExecution])
  @@index([isAutonomous])
  @@map("copilot_logs")
}

// Session analytics aggregation table
model CopilotAnalytics {
  id                String             @id @default(cuid())
  period            String             // "daily", "weekly", "monthly"
  periodStart       DateTime
  periodEnd         DateTime
  
  // Usage metrics
  totalSessions     Int                @default(0)
  activeSessions    Int                @default(0)
  completedSessions Int                @default(0)
  totalMessages     Int                @default(0)
  averageSessionLength Float           @default(0.0) // minutes
  
  // Performance metrics
  averageConfidence Float              @default(0.0)
  successRate       Float              @default(0.0)
  commandSuccessRate Float             @default(0.0)
  averageResponseTime Float            @default(0.0) // milliseconds
  
  // Cost and usage
  totalTokensUsed   Int                @default(0)
  totalCost         Float              @default(0.0)
  costPerSession    Float              @default(0.0)
  
  // Popular patterns
  topMessageTypes   Json?              // Most common message types
  topIntents        Json?              // Most common user intents
  topAgentActions   Json?              // Most executed agent actions
  
  // Quality metrics
  userSatisfaction  Float              @default(0.0)
  errorRate         Float              @default(0.0)
  
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@unique([period, periodStart])
  @@index([period, periodStart])
  @@map("copilot_analytics")
}

// Additional enums for Copilot
enum SessionStatus {
  ACTIVE
  COMPLETED
  ABANDONED
  ERROR
  ARCHIVED
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum MessageType {
  QUERY
  COMMAND
  CLARIFICATION
  CONFIRMATION
  FEEDBACK
}

// Executive Reporting Layer Models
model ExecutiveInsight {
  id              String         @id @default(cuid())
  title           String
  summary         String         @db.Text
  insightType     InsightType
  priority        ReportPriority @default(MEDIUM)
  businessImpact  Float          // 0-1 score for business relevance
  confidence      Float          // 0-1 confidence in the insight
  
  // Data sources and evidence
  sourceType      String         // 'CAMPAIGN', 'AGENT_PERFORMANCE', 'CROSS_CAMPAIGN', 'MESH_COORDINATION'
  sourceId        String?        // Campaign ID, Goal Plan ID, etc.
  evidence        Json           // Supporting data, metrics, patterns
  
  // Categorization and filtering
  category        String         // 'PERFORMANCE', 'BRAND_ALIGNMENT', 'TREND', 'RISK', 'OPPORTUNITY'
  tags            String[]
  affectedAgents  String[]       // Agent types or IDs impacted
  
  // Time and context
  timeframe       Json           // { "start": "2024-01-01", "end": "2024-01-31", "period": "weekly" }
  isActionable    Boolean        @default(false)
  recommendations Json           // Array of recommended actions
  
  // Relationships
  executiveReports ExecutiveReportInsight[]
  
  // Metrics tracking
  viewCount       Int            @default(0)
  lastViewed      DateTime?
  isArchived      Boolean        @default(false)
  
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  expiresAt       DateTime?      // For time-sensitive insights

  @@index([insightType, priority])
  @@index([category, createdAt])
  @@index([businessImpact])
  @@map("executive_insights")
}

model ExecutiveReport {
  id                String                  @id @default(cuid())
  title             String
  description       String?
  reportType        ReportType
  status            ReportStatus            @default(GENERATING)
  priority          ReportPriority          @default(MEDIUM)
  
  // Content and structure
  content           Json                    // Full report content (markdown, HTML, data)
  summary           String                  @db.Text
  keyFindings       Json                    // Array of top findings
  recommendations   Json                    // Array of action items
  
  // Scope and filters
  timeframe         Json                    // Period covered by report
  includeAgents     String[]                // Agent types included
  includeCampaigns  String[]                // Campaign IDs included
  filters           Json?                   // Additional filters applied
  
  // Generation metadata
  generatedBy       String                  // Agent or user who generated
  generationTime    Int                     // Milliseconds to generate
  dataSource        Json                    // Sources used for report
  templateUsed      String?                 // Template name if applicable
  
  // Access and sharing
  isPublic          Boolean                 @default(false)
  sharedWith        String[]                // User IDs with access
  exportedFormats   String[]                // 'PDF', 'CSV', 'NOTION', 'SLACK'
  lastExported      DateTime?
  
  // Insights relationship
  insights          ExecutiveReportInsight[]
  
  // Tracking
  viewCount         Int                     @default(0)
  downloadCount     Int                     @default(0)
  
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt

  @@index([reportType, status])
  @@index([createdAt])
  @@map("executive_reports")
}

model ExecutiveReportInsight {
  id               String           @id @default(cuid())
  reportId         String
  insightId        String
  orderIndex       Int              // Position in report
  customSummary    String?          // Report-specific summary override
  
  report           ExecutiveReport  @relation(fields: [reportId], references: [id], onDelete: Cascade)
  insight          ExecutiveInsight @relation(fields: [insightId], references: [id], onDelete: Cascade)
  
  @@unique([reportId, insightId])
  @@map("executive_report_insights")
}

model CampaignSummary {
  id                    String      @id @default(cuid())
  campaignId            String      @unique
  campaignName          String
  campaignType          String
  
  // Performance metrics
  totalBudget           Float?
  actualSpend           Float?
  impressions           Int         @default(0)
  clicks                Int         @default(0)
  conversions           Int         @default(0)
  revenue               Float       @default(0.0)
  
  // Calculated metrics
  ctr                   Float       @default(0.0)
  conversionRate        Float       @default(0.0)
  costPerConversion     Float       @default(0.0)
  roas                  Float       @default(0.0) // Return on Ad Spend
  
  // Agent performance
  agentsUsed            Json        // { "agentType": "executionCount" }
  agentSuccessRates     Json        // { "agentType": "successRate" }
  totalExecutionTime    Int         @default(0) // minutes
  
  // Brand alignment
  brandAlignmentScore   Float       @default(0.0)
  brandConsistencyIssues Json?      // Array of issues found
  
  // Status and timeline
  status                String      // 'ACTIVE', 'COMPLETED', 'PAUSED', 'FAILED'
  startDate             DateTime?
  endDate               DateTime?
  duration              Int?        // days
  
  // Cross-campaign insights
  patternsIdentified    Json?       // Successful patterns from this campaign
  replayCount           Int         @default(0) // How many times this was replayed
  
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt

  @@index([campaignType])
  @@index([status])
  @@index([brandAlignmentScore])
  @@map("campaign_summaries")
}

model AgentPerformanceLog {
  id                 String      @id @default(cuid())
  agentId            String
  agentType          String
  
  // Performance metrics
  totalExecutions    Int         @default(0)
  successfulExecutions Int       @default(0)
  failedExecutions   Int         @default(0)
  averageExecutionTime Float     @default(0.0) // minutes
  
  // Quality metrics
  averageConfidence  Float       @default(0.0)
  brandAlignmentScore Float      @default(0.0)
  customerSatisfaction Float?    @default(0.0)
  
  // Resource usage
  totalTokensUsed    Int         @default(0)
  totalCost          Float       @default(0.0)
  costPerExecution   Float       @default(0.0)
  
  // Goal achievement
  goalsCompleted     Int         @default(0)
  goalSuccessRate    Float       @default(0.0)
  impactScore        Float       @default(0.0) // Business impact
  
  // Collaboration metrics
  collaborationCount Int         @default(0) // How often worked with other agents
  consensusScore     Float       @default(0.0) // Average consensus participation
  
  // Time period
  periodStart        DateTime
  periodEnd          DateTime
  reportingPeriod    String      // 'DAILY', 'WEEKLY', 'MONTHLY'
  
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt

  @@index([agentType, reportingPeriod])
  @@index([goalSuccessRate])
  @@index([impactScore])
  @@map("agent_performance_logs")
}

// Boardroom Strategy Generator Models
model BoardroomReport {
  id                String             @id @default(cuid())
  title             String
  subtitle          String?
  reportType        BoardroomReportType @default(QBR)
  quarter           String?            // "Q1 2024", "Q2 2024", etc.
  theme             BoardroomTheme     @default(NEON_GLASS)
  
  // Content structure
  slides            StrategySlide[]
  forecasts         ForecastInsight[]
  
  // Executive summary
  keyTakeaways      Json               // Array of main insights
  strategicRecommendations Json        // C-level action items
  nextQuarterGoals  Json               // Forward-looking objectives
  
  // Performance overview
  overallScore      Float              @default(0.0) // 0-100 aggregate score
  campaignsCovered  Json               // Campaign IDs included
  agentsCovered     Json               // Agent types analyzed
  timeframeCovered  Json               // { "start": "2024-01-01", "end": "2024-03-31" }
  
  // Financial overview
  totalBudget       Float?
  totalSpend        Float?
  totalRevenue      Float?
  overallROAS       Float              @default(0.0)
  costSavings       Float              @default(0.0)
  
  // Strategic metrics
  brandHealthScore  Float              @default(0.0)
  marketPosition    String?            // "LEADING", "COMPETITIVE", "EMERGING"
  competitiveAdvantage Json?           // Key differentiators identified
  
  // Generation metadata
  generationTime    Int                @default(0) // Milliseconds
  dataPoints        Int                @default(0) // Number of data sources
  confidenceScore   Float              @default(0.0)
  
  // Output formats
  markdownContent   String?            @db.Text
  htmlContent       String?            @db.Text
  notionData        Json?              // Notion-ready structured data
  
  // Access and distribution
  isPublic          Boolean            @default(false)
  sharedWith        String[]           // User IDs with access
  presentedAt       DateTime?          // When presented to board
  feedbackScore     Float?             // Board feedback (1-10)
  
  // Relationships
  basedOnInsights   String[]           // ExecutiveInsight IDs
  
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@index([reportType, quarter])
  @@index([createdAt])
  @@map("boardroom_reports")
}

model ForecastInsight {
  id                String              @id @default(cuid())
  boardroomReportId String?
  
  // Forecast details
  metricName        String              // "ROAS", "Conversion Rate", "Brand Score"
  currentValue      Float
  projectedValue    Float
  projectionPeriod  String              // "3_MONTHS", "6_MONTHS", "12_MONTHS"
  projectionType    ForecastType        @default(TREND_BASED)
  
  // Confidence and methodology
  confidenceLevel   Float               @default(0.0) // 0-1
  methodology       String              // "exponential_smoothing", "linear_regression", "agent_consensus"
  dataQuality       Float               @default(0.0) // 0-1 quality of input data
  
  // Historical context
  historicalData    Json                // Time series data used for forecast
  seasonalityFactor Float?              @default(0.0)
  trendStrength     Float               @default(0.0)
  
  // Business context
  assumptions       Json                // Array of business assumptions
  riskFactors       Json                // Potential risks affecting forecast
  opportunities     Json                // Upside scenarios
  
  // Chart data for visualization
  chartData         Json                // Ready-to-render chart configuration
  benchmarkData     Json?               // Industry benchmark comparisons
  
  // Impact analysis
  businessImpact    Float               @default(0.0) // Projected $ impact
  strategicPriority ReportPriority      @default(MEDIUM)
  actionRequired    Boolean             @default(false)
  
  boardroomReport   BoardroomReport?    @relation(fields: [boardroomReportId], references: [id])
  
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  @@index([metricName, projectionPeriod])
  @@index([confidenceLevel])
  @@map("forecast_insights")
}

model StrategySlide {
  id                String              @id @default(cuid())
  boardroomReportId String
  
  // Slide structure
  slideNumber       Int
  slideType         SlideType           @default(METRIC)
  title             String
  subtitle          String?
  
  // Content
  mainContent       Json                // Primary slide content (text, data, charts)
  supportingData    Json?               // Additional context data
  visualConfig      Json?               // Chart/graph configuration
  
  // Narrative elements
  keyTakeaway       String?             // Main point of the slide
  businessContext   String?             // Why this matters to the business
  recommendation    String?             // What action should be taken
  
  // Data sources
  sourceMetrics     Json                // Which metrics/campaigns this represents
  dataTimestamp     DateTime?           // When the data was last updated
  
  // Styling and layout
  theme             BoardroomTheme      @default(NEON_GLASS)
  layout            String              @default("standard") // "title", "content", "split", "chart"
  backgroundColor   String?
  textColor         String?
  
  boardroomReport   BoardroomReport     @relation(fields: [boardroomReportId], references: [id], onDelete: Cascade)
  
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  @@unique([boardroomReportId, slideNumber])
  @@index([slideType])
  @@map("strategy_slides")
}

// Enums for Boardroom Strategy Generator
enum BoardroomReportType {
  QBR                    // Quarterly Business Review
  MONTHLY_STRATEGY       // Monthly strategic overview
  CAMPAIGN_POSTMORTEM    // Post-campaign analysis
  ANNUAL_REVIEW          // Yearly comprehensive review
  BOARD_PRESENTATION     // Special board meeting
  INVESTOR_UPDATE        // Investor relations
  CUSTOM                 // Custom report type
}

enum BoardroomTheme {
  NEON_GLASS             // Default NeonHub theme
  EXECUTIVE_DARK         // Dark professional theme
  CMO_LITE               // Light, clean theme
  BRANDED                // Company brand colors
  MINIMAL                // Minimal black/white
}

enum ForecastType {
  TREND_BASED            // Based on historical trends
  AGENT_CONSENSUS        // AI agent predictions
  EXPONENTIAL_SMOOTHING  // Statistical forecasting
  SEASONAL_ADJUSTED      // Accounts for seasonality
  BENCHMARK_PROJECTED    // Industry benchmark-based
  HYBRID                 // Multiple methods combined
}

enum SlideType {
  TITLE                  // Title slide
  EXECUTIVE_SUMMARY      // High-level overview
  METRIC                 // KPI/metrics slide
  TREND                  // Trend analysis
  FORECAST               // Future projections
  AGENT_HIGHLIGHT        // Agent performance showcase
  BRAND_AUDIT           // Brand consistency review
  CAMPAIGN_BREAKDOWN    // Campaign performance detail
  STRATEGIC_RECOMMENDATION // Action items
  COMPETITIVE_ANALYSIS  // Market positioning
  FINANCIAL_OVERVIEW    // Budget/revenue summary
  APPENDIX              // Supporting data
}

// Enums for Executive Reporting
enum InsightType {
  PERFORMANCE_TREND
  BRAND_ALIGNMENT_ALERT
  COST_OPTIMIZATION
  REVENUE_OPPORTUNITY
  RISK_ASSESSMENT
  AGENT_RECOMMENDATION
  CAMPAIGN_PATTERN
  MARKET_INTELLIGENCE
  COMPETITIVE_INSIGHT
  STRATEGIC_RECOMMENDATION
}

enum ReportPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
  URGENT
}

enum ReportType {
  WEEKLY_DIGEST
  CAMPAIGN_SUMMARY
  AGENT_PERFORMANCE
  BRAND_CONSISTENCY_AUDIT
  EXECUTIVE_SUMMARY
  TREND_ANALYSIS
  ROI_REPORT
  STRATEGIC_REVIEW
  CUSTOM
}

enum ReportStatus {
  GENERATING
  READY
  SCHEDULED
  SENT
  FAILED
  ARCHIVED
}

// Enterprise Budget Tracking Models

model BillingLog {
  id           String   @id @default(cuid())
  agentType    AgentType
  campaignId   String?
  tokens       Int
  cost         Float
  task         String?
  executionId  String?
  metadata     Json?
  timestamp    DateTime @default(now())
  
  // Cost-Efficiency Tracking
  impactScore        Float?   @default(0.0) // 0-1 score from system feedback
  conversionAchieved Boolean  @default(false)
  qualityScore       Float?   @default(0.0) // 0-1 score for output quality
  retryCount         Int      @default(0)   // Number of retries needed
  executionTime      Int?     // Milliseconds to complete
  
  // Relations
  campaign     Campaign? @relation(fields: [campaignId], references: [id])
  
  @@index([campaignId])
  @@index([agentType])
  @@index([timestamp])
  @@index([impactScore])
  @@index([conversionAchieved])
  @@map("billing_logs")
}

model CampaignCost {
  id           String   @id @default(cuid())
  campaignId   String   @unique
  totalCost    Float    @default(0.0)
  monthlyBudget Float?
  currentMonth String   // Format: "2024-01"
  lastUpdated  DateTime @updatedAt
  createdAt    DateTime @default(now())
  
  // Relations
  campaign     Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  
  @@index([currentMonth])
  @@map("campaign_costs")
}

model MonthlyBudget {
  id           String   @id @default(cuid())
  month        String   @unique // Format: "2024-01"
  totalBudget  Float    @default(1000.0)
  totalSpent   Float    @default(0.0)
  alertThreshold Float  @default(0.8) // 80% of budget
  isAlertSent  Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@map("monthly_budgets")
}

// Launch Intelligence & Campaign Monitoring Models

model CampaignExecutionMetric {
  id           String   @id @default(cuid())
  campaignId   String
  agentType    AgentType
  executionCount Int    @default(0)
  successCount Int      @default(0)
  failureCount Int      @default(0)
  avgExecutionTime Float @default(0.0) // milliseconds
  totalCost    Float    @default(0.0)
  date         DateTime @default(now())
  hour         Int      // 0-23 for hourly tracking
  region       String?  @default("UAE")
  
  // Relations
  campaign     Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  
  @@unique([campaignId, agentType, date, hour])
  @@index([campaignId, date])
  @@index([region, date])
  @@map("campaign_execution_metrics")
}

model SentimentAnalysis {
  id           String   @id @default(cuid())
  campaignId   String?
  platform     Platform
  language     String   // "ar", "en", "ar-AE"
  text         String   @db.Text
  sentiment    String   // "positive", "negative", "neutral"
  score        Float    // -1.0 to 1.0
  confidence   Float    // 0.0 to 1.0
  region       String   @default("UAE")
  source       String   // "social_mention", "review", "comment", "whatsapp"
  metadata     Json?    // Additional context like post ID, user info
  
  // Relations
  campaign     Campaign? @relation(fields: [campaignId], references: [id])
  
  createdAt    DateTime @default(now())
  
  @@index([campaignId, language, createdAt])
  @@index([region, language, sentiment])
  @@index([platform, createdAt])
  @@map("sentiment_analysis")
}

model LeadQualityMetric {
  id           String   @id @default(cuid())
  campaignId   String
  leadId       String?
  source       String   // "whatsapp", "website", "social", "ad"
  stage        String   // "inquiry", "qualified", "demo", "proposal", "closed"
  score        Float    // 0-100 lead quality score
  value        Float?   // Potential deal value
  responseTime Int?     // Minutes to first response
  conversionTime Int?   // Hours from lead to conversion
  region       String   @default("UAE")
  language     String   @default("ar")
  
  // WhatsApp specific fields
  whatsappNumber String?
  messageCount Int?     @default(0)
  lastActivity DateTime?
  
  // Relations
  campaign     Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  lead         B2BLead? @relation(fields: [leadId], references: [id])
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([campaignId, stage, createdAt])
  @@index([source, region])
  @@index([score])
  @@map("lead_quality_metrics")
}

model BudgetPacing {
  id           String   @id @default(cuid())
  campaignId   String
  plannedDaily Float    // Planned daily spend
  actualSpend  Float    // Actual spend for the day
  date         DateTime
  dayOfCampaign Int     // Day 1, 2, 3... of campaign
  variance     Float    // Actual vs planned (%)
  cumulativeSpend Float // Total spend to date
  cumulativePlan Float  // Total planned spend to date
  projectedTotal Float? // Forecasted total spend
  
  // Performance metrics
  impressions  Int?     @default(0)
  clicks       Int?     @default(0)
  conversions  Int?     @default(0)
  revenue      Float?   @default(0.0)
  roi          Float?   @default(0.0)
  
  // Relations
  campaign     Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  
  @@unique([campaignId, date])
  @@index([campaignId, dayOfCampaign])
  @@map("budget_pacing")
}

model LaunchAlert {
  id           String   @id @default(cuid())
  campaignId   String?
  alertType    String   // "budget_pacing", "roi_drop", "sentiment_negative", "execution_failure"
  severity     String   // "info", "warning", "critical"
  title        String
  message      String   @db.Text
  threshold    Float?   // The threshold that triggered this alert
  currentValue Float?   // Current metric value
  region       String   @default("UAE")
  
  // Alert status
  isRead       Boolean  @default(false)
  isResolved   Boolean  @default(false)
  resolvedAt   DateTime?
  resolvedBy   String?
  
  // Actions taken
  autoAction   String?  // "budget_reallocation", "pause_campaign", "escalate"
  actionResult Json?    // Result of auto-action
  
  // Relations
  campaign     Campaign? @relation(fields: [campaignId], references: [id])
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([campaignId, severity, createdAt])
  @@index([alertType, isResolved])
  @@index([region, createdAt])
  @@map("launch_alerts")
}

model BudgetOptimization {
  id                  String   @id @default(cuid())
  campaignId          String
  recommendationType  String   // "increase_budget", "decrease_budget", "reallocate", "pause", "scale"
  currentBudget       Float
  recommendedBudget   Float
  reasoning           String   @db.Text
  confidence          Float    // 0-1 confidence in recommendation
  expectedImprovement Float?   // Expected ROI/performance improvement
  
  // Supporting metrics
  currentRoi          Float?
  avgRoi              Float?   // Historical average
  trendDirection      String?  // "up", "down", "stable"
  competitorActivity  Float?   // Competitor spending index
  
  // Implementation status
  status              String   @default("pending") // "pending", "applied", "rejected", "expired"
  appliedAt           DateTime?
  appliedBy           String?
  
  // Relations
  campaign            Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  
  createdAt           DateTime @default(now())
  expiresAt           DateTime // Recommendations expire after 24-48 hours
  
  @@index([campaignId, status])
  @@index([recommendationType, createdAt])
  @@map("budget_optimizations")
}

// SEO Agent Models for TASK 005

model SEOEntry {
  id           String   @id @default(cuid())
  campaignId   String?
  url          String
  metadata     Json     // Full SEO metadata (title, description, keywords, etc.)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  campaign     Campaign? @relation(fields: [campaignId], references: [id])
  analysis     SEOAnalysis[]
  
  @@index([campaignId])
  @@index([url])
  @@index([createdAt])
  @@map("seo_entries")
}

model KeywordSuggestion {
  id           String   @id @default(cuid())
  campaignId   String?
  keyword      String
  relevance    Float?   // Relevance score (0-100)
  difficulty   Int?     // SEO difficulty (0-100)
  opportunity  Int?     // Opportunity score (0-100)
  searchVolume String?  // "low", "medium", "high"
  intent       String?  // "informational", "commercial", "navigational", "transactional"
  reason       String?  // AI explanation for recommendation
  source       String   @default("ai_generated") // "ai_generated", "user_input", "competitor_analysis"
  createdAt    DateTime @default(now())
  
  // Relations
  campaign     Campaign? @relation(fields: [campaignId], references: [id])
  
  @@index([campaignId])
  @@index([keyword])
  @@index([relevance])
  @@index([createdAt])
  @@map("keyword_suggestions")
}

model SEOAnalysis {
  id          String   @id @default(cuid())
  campaignId  String?
  seoEntryId  String?
  pageUrl     String
  score       Int      // SEO score (0-100)
  issues      Json     // Array of SEO issues and suggestions
  keywords    Json     // Keyword analysis results
  suggestions Json     // SEO improvement suggestions
  metadata    Json?    // Additional analysis metadata (execution time, AI model used, etc.)
  agentType   String   @default("SEO") // Which agent performed the analysis
  version     String   @default("1.0") // Analysis version for tracking improvements
  createdAt   DateTime @default(now())
  
  // Relations
  campaign    Campaign? @relation(fields: [campaignId], references: [id])
  seoEntry    SEOEntry? @relation(fields: [seoEntryId], references: [id])
  
  @@index([campaignId])
  @@index([pageUrl])
  @@index([score])
  @@index([createdAt])
  @@index([agentType])
  @@map("seo_analyses")
}

model SEOAlert {
  id          String   @id @default(cuid())
  campaignId  String?
  url         String
  alertType   String   // "score_drop", "keyword_cannibalization", "missing_metadata", "opportunity", "critical_issue"
  severity    String   // "info", "warning", "critical"
  title       String
  message     String   @db.Text
  aiReason    String?  @db.Text // AI-generated explanation
  suggestion  String?  @db.Text // AI-generated fix recommendation
  threshold   Float?   // The threshold that triggered this alert (e.g., score drop > 10 points)
  currentValue Float?  // Current metric value
  previousValue Float? // Previous metric value for comparison
  metadata    Json?    // Additional alert context and data
  
  // Alert status and management
  isRead      Boolean  @default(false)
  isResolved  Boolean  @default(false)
  resolvedAt  DateTime?
  resolvedBy  String?
  priority    Int      @default(5) // 1-10 priority scale
  
  // Relations
  campaign    Campaign? @relation(fields: [campaignId], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([campaignId, severity, createdAt])
  @@index([alertType, isResolved])
  @@index([url])
  @@index([priority])
  @@index([createdAt])
  @@map("seo_alerts")
}

// AI Agent Scheduler Models for TASK 008

model AgentSchedule {
  id           String   @id @default(cuid())
  agentType    String   // "SEOAlertAgent", "TrendAgent", "ContentAgent", etc.
  name         String?  // Optional human-readable name for the schedule
  description  String?  // Optional description of what this schedule does
  cron         String   // Cron expression e.g., "0 */6 * * *" (every 6 hours)
  timezone     String   @default("UTC") // Timezone for cron execution
  enabled      Boolean  @default(true)
  
  // Execution tracking
  lastRun      DateTime?
  nextRun      DateTime?
  lastStatus   String?  // "success", "failed", "running", "pending"
  lastError    String?  // Error message if last run failed
  executionCount Int    @default(0) // Total number of executions
  successCount   Int    @default(0) // Number of successful executions
  failureCount   Int    @default(0) // Number of failed executions
  
  // Configuration
  config       Json?    // Agent-specific configuration parameters
  retryConfig  Json?    // Retry configuration (max retries, delay, etc.)
  timeout      Int?     @default(300000) // Timeout in milliseconds (5 min default)
  
  // Metadata
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    String?  // User who created this schedule
  
  // Execution history
  executions   ScheduleExecution[]
  
  @@index([agentType])
  @@index([enabled])
  @@index([nextRun])
  @@index([lastRun])
  @@index([createdAt])
  @@map("agent_schedules")
}

model ScheduleExecution {
  id           String   @id @default(cuid())
  scheduleId   String
  agentType    String
  status       String   // "running", "success", "failed", "timeout"
  startedAt    DateTime @default(now())
  completedAt  DateTime?
  duration     Int?     // Execution duration in milliseconds
  result       Json?    // Agent execution result
  error        String?  // Error message if failed
  retryAttempt Int      @default(0) // Which retry attempt this was (0 = first attempt)
  metadata     Json?    // Additional execution metadata
  
  // Relations
  schedule     AgentSchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  
  @@index([scheduleId])
  @@index([agentType])
  @@index([status])
  @@index([startedAt])
  @@index([completedAt])
  @@map("schedule_executions")
}

// Cross-Agent Analytics Models for TASK 010

model AgentMetric {
  id               String    @id @default(cuid())
  agentName        String
  agentType        AgentType
  campaignId       String?
  executionId      String?
  metricType       String
  metricSubtype    String?
  category         String?
  value            Float
  previousValue    Float?
  target           Float?
  unit             String?
  region           String?
  platform         Platform?
  language         String?
  timeframe        String?
  trend            MetricTrend?
  changePercent    Float?
  performanceLevel PerformanceLevel?
  confidence       Float?
  source           MetricSource
  aggregationLevel String    @default("individual")
  batchId          String?
  timestamp        DateTime  @default(now())
  recordedAt       DateTime  @default(now())
  metadata         Json?
  tags             String[]
  
  // Relations
  campaign         Campaign? @relation(fields: [campaignId], references: [id])
  actionLogs       AgentActionLog[]

  @@index([agentName, timestamp])
  @@index([agentType, timestamp])
  @@index([campaignId, timestamp])
  @@index([metricType, timestamp])
  @@index([value, timestamp])
  @@index([batchId])
  @@index([aggregationLevel])
  @@map("agent_metrics")
}

model AgentActionLog {
  id            String      @id @default(cuid())
  agentName     String
  agentType     AgentType
  actionType    ActionType
  campaignId    String?
  metricId      String?
  triggerValue  Float
  threshold     Float?
  condition     String      // e.g., "greater_than", "less_than", "equals"
  status        ActionStatus @default(PENDING)
  executedAt    DateTime    @default(now())
  completedAt   DateTime?
  retryCount    Int         @default(0)
  maxRetries    Int         @default(3)
  priority      ActionPriority @default(MEDIUM)
  notes         String?
  errorMessage  String?
  metadata      Json?
  
  // Action results and impact
  impactMetrics Json?       // Track what changed after action
  rollbackData  Json?       // Data needed to rollback action if needed
  
  // Relations
  campaign      Campaign?   @relation(fields: [campaignId], references: [id])
  metric        AgentMetric? @relation(fields: [metricId], references: [id])
  learningLogs  LearningLog[]
  
  // Dependent actions (chain of actions)
  parentActionId    String?
  parentAction      AgentActionLog? @relation("ActionChain", fields: [parentActionId], references: [id])
  dependentActions  AgentActionLog[] @relation("ActionChain")
  
  @@index([agentType, status, executedAt])
  @@index([campaignId, status, executedAt])
  @@index([actionType, status, executedAt])
  @@index([priority, status, executedAt])
  @@index([parentActionId])
  @@map("agent_action_logs")
}

model AgentActionRule {
  id              String      @id @default(cuid())
  name            String
  description     String?
  agentType       AgentType
  actionType      ActionType
  
  // Trigger conditions
  metricType      String
  metricSubtype   String?
  category        String?
  condition       String      // "greater_than", "less_than", "equals", "change_percent"
  threshold       Float
  
  // Time-based conditions
  timeWindow      Int?        // minutes to look back
  consecutiveCount Int?       // how many consecutive violations needed
  cooldownPeriod  Int?        // minutes to wait before triggering again
  
  // Action configuration
  priority        ActionPriority @default(MEDIUM)
  maxRetries      Int         @default(3)
  enabled         Boolean     @default(true)
  
  // Targeting
  campaignIds     String[]    // specific campaigns, empty = all
  regions         String[]    // specific regions, empty = all
  platforms       Platform[]  // specific platforms, empty = all
  
  // Action parameters
  actionConfig    Json        // configuration specific to action type
  fallbackAction  ActionType? // action to take if primary fails
  fallbackConfig  Json?       // configuration for fallback action
  
  // Metadata
  createdBy       String?     // user ID who created the rule
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  lastTriggered   DateTime?
  triggerCount    Int         @default(0)
  
  @@index([agentType, enabled])
  @@index([actionType, enabled])
  @@index([metricType, enabled])
  @@index([priority, enabled])
  @@map("agent_action_rules")
}

model LearningLog {
  id                String      @id @default(cuid())
  
  // Learning context
  agentType         AgentType
  metricType        String
  metricSubtype     String?
  category          String?
  
  // Learning trigger
  triggerType       LearningTriggerType
  actionLogId       String?     // if triggered by an action
  batchId           String?     // if part of batch learning
  
  // Learning input data
  inputMetrics      Json        // metrics that triggered learning
  actionTaken       String?     // action that was taken
  actionOutcome     ActionStatus? // outcome of the action
  
  // Learning decisions
  learningType      LearningType
  adjustmentType    AdjustmentType
  
  // Previous values
  previousValue     Float
  previousWeight    Float?
  previousThreshold Float?
  previousConfidence Float?
  
  // New values
  newValue          Float
  newWeight         Float?
  newThreshold      Float?
  newConfidence     Float?
  
  // Learning algorithm data
  algorithm         String      @default("weighted_average")
  learningRate      Float       @default(0.1)
  confidence        Float       @default(0.5)
  sampleSize        Int         @default(1)
  
  // Performance impact
  expectedImprovement Float?
  actualImprovement   Float?
  impactMeasured      Boolean   @default(false)
  measurementDate     DateTime?
  
  // Quality and validation
  validated         Boolean     @default(false)
  validationScore   Float?
  rollbackReason    String?
  rolledBack        Boolean     @default(false)
  
  // Metadata
  metadata          Json?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  // Relations
  actionLog         AgentActionLog? @relation(fields: [actionLogId], references: [id])
  metricWeights     MetricWeight[]  @relation("LearningLogWeights")
  
  @@index([agentType, metricType, createdAt])
  @@index([triggerType, learningType, createdAt])
  @@index([actionLogId])
  @@index([batchId])
  @@index([validated, rolledBack])
  @@map("learning_logs")
}

model MetricWeight {
  id              String      @id @default(cuid())
  
  // Metric identification
  agentType       AgentType
  metricType      String
  metricSubtype   String?
  category        String?
  
  // Campaign and context targeting
  campaignId      String?
  platform        Platform?
  region          String?
  timeframe       String?     // e.g., "24h", "7d", "30d"
  
  // Weight and scoring
  weight          Float       @default(1.0)
  baselineWeight  Float       @default(1.0)  // original weight before learning
  
  // Threshold management
  threshold       Float?
  baselineThreshold Float?
  thresholdDirection String?   // "higher_better" or "lower_better"
  
  // Confidence and reliability
  confidence      Float       @default(0.5)
  reliability     Float       @default(0.5)
  sampleSize      Int         @default(0)
  
  // Performance tracking
  performanceScore Float      @default(0.0)
  successRate     Float       @default(0.0)
  lastSuccess     DateTime?
  lastFailure     DateTime?
  
  // Learning statistics
  adjustmentCount Int         @default(0)
  lastAdjustment  DateTime?
  totalImprovement Float      @default(0.0)
  
  // Validation and quality
  isActive        Boolean     @default(true)
  isValidated     Boolean     @default(false)
  validationDate  DateTime?
  
  // Learning algorithm parameters
  learningRate    Float       @default(0.1)
  decayRate       Float       @default(0.01)
  stabilityScore  Float       @default(0.0)
  
  // Version control for weights
  version         Int         @default(1)
  previousVersionId String?
  previousVersion MetricWeight? @relation("WeightVersions", fields: [previousVersionId], references: [id])
  nextVersions    MetricWeight[] @relation("WeightVersions")
  
  // Metadata and tracking
  metadata        Json?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relations
  campaign        Campaign?   @relation(fields: [campaignId], references: [id])
  learningLogs    LearningLog[] @relation("LearningLogWeights")
  
  // Prevent duplicate weights for same context
  @@unique([agentType, metricType, metricSubtype, category, campaignId, platform, region, timeframe])
  @@index([agentType, metricType, isActive])
  @@index([performanceScore, confidence])
  @@index([lastAdjustment, adjustmentCount])
  @@index([version, createdAt])
  @@map("metric_weights")
}

model LearningInsight {
  id              String      @id @default(cuid())
  
  // Insight context
  agentType       AgentType
  metricType      String
  metricSubtype   String?
  category        String?
  
  // Insight details
  insightType     InsightType
  title           String
  description     String      @db.Text
  recommendation  String      @db.Text
  
  // Confidence and priority
  confidence      Float       @default(0.5)
  priority        InsightPriority @default(MEDIUM)
  impact          InsightImpact   @default(MEDIUM)
  
  // Supporting data
  supportingData  Json
  evidenceCount   Int         @default(0)
  sampleSize      Int         @default(0)
  
  // Performance prediction
  predictedImprovement Float?
  actualImprovement    Float?
  predictionAccuracy   Float?
  
  // Status and lifecycle
  status          InsightStatus @default(PENDING)
  implementedAt   DateTime?
  validatedAt     DateTime?
  archivedAt      DateTime?
  
  // Action integration
  suggestedActions String[]    // ActionType values as strings
  implementedActions String[]
  
  // User interaction
  userFeedback    String?
  userRating      Float?      // 1.0 to 5.0
  dismissed       Boolean     @default(false)
  dismissedReason String?
  
  // Related insights
  parentInsightId String?
  parentInsight   LearningInsight? @relation("InsightHierarchy", fields: [parentInsightId], references: [id])
  childInsights   LearningInsight[] @relation("InsightHierarchy")
  
  // Metadata
  metadata        Json?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  @@index([agentType, metricType, status])
  @@index([priority, impact, confidence])
  @@index([insightType, status, createdAt])
  @@index([parentInsightId])
  @@map("learning_insights")
}

// Enums for Learning System

enum LearningTriggerType {
  ACTION_OUTCOME      // Triggered by action success/failure
  METRIC_DRIFT        // Triggered by metric performance drift
  THRESHOLD_BREACH    // Triggered by threshold violations
  PATTERN_DETECTION   // Triggered by pattern recognition
  SCHEDULED_ANALYSIS  // Triggered by scheduled learning runs
  MANUAL_FEEDBACK     // Triggered by manual user feedback
  CROSS_AGENT_SYNC    // Triggered by cross-agent learning
  PERFORMANCE_REVIEW  // Triggered by performance reviews
}

enum LearningType {
  WEIGHT_ADJUSTMENT     // Adjusting metric weights
  THRESHOLD_CALIBRATION // Adjusting threshold values
  CONFIDENCE_TUNING     // Adjusting confidence scores
  SCORING_RECALIBRATION // Adjusting scoring algorithms
  PATTERN_LEARNING      // Learning new patterns
  STRATEGY_OPTIMIZATION // Optimizing strategies
  PARAMETER_TUNING      // Fine-tuning parameters
}

enum AdjustmentType {
  INCREASE       // Increase value
  DECREASE       // Decrease value
  CALIBRATE      // Recalibrate to optimal value
  STABILIZE      // Reduce volatility
  OPTIMIZE       // Multi-objective optimization
  RESET          // Reset to baseline
  FINE_TUNE      // Minor adjustments
}

enum InsightPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
  URGENT
}

enum InsightImpact {
  MINIMAL
  LOW
  MEDIUM
  HIGH
  SIGNIFICANT
  TRANSFORMATIVE
}

enum InsightStatus {
  PENDING
  REVIEWED
  APPROVED
  IMPLEMENTED
  VALIDATED
  REJECTED
  ARCHIVED
}

// Multi-Agent Collaboration Models for TASK 013

model AgentChain {
  id              String      @id @default(cuid())
  name            String
  description     String?     @db.Text
  version         String      @default("1.0")
  
  // Chain type and template
  chainType       ChainType
  template        String?     // Reference to predefined template
  isTemplate      Boolean     @default(false)
  isActive        Boolean     @default(true)
  
  // Chain definition
  definition      Json        // Complete chain definition including steps, conditions, etc.
  agentSequence   Json        // Array of agent configurations and order
  
  // Execution flow
  executionMode   ChainExecutionMode @default(SEQUENTIAL)
  allowParallel   Boolean     @default(false)
  maxRetries      Int         @default(3)
  timeoutMinutes  Int         @default(60)
  
  // Goals and objectives
  primaryGoal     String
  secondaryGoals  String[]
  successCriteria Json        // Conditions that define success
  
  // Performance tracking
  executionCount  Int         @default(0)
  successCount    Int         @default(0)
  failureCount    Int         @default(0)
  averageExecutionTime Float  @default(0.0)
  averageSuccessRate   Float  @default(0.0)
  
  // Cost and resource management
  estimatedCost   Float?
  actualCost      Float       @default(0.0)
  budgetLimit     Float?
  
  // Campaign and context
  campaignIds     String[]    // Campaigns this chain can be used for
  industry        String?
  language        String?     @default("en")
  region          String?
  
  // Validation and quality
  isValidated     Boolean     @default(false)
  validatedBy     String?     // User who validated
  validatedAt     DateTime?
  qualityScore    Float?      // 0.0 to 1.0
  
  // Metadata and tracking
  createdBy       String?     // User who created
  tags            String[]
  metadata        Json?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  lastExecuted    DateTime?
  
  // Relations
  executions      ChainExecution[]
  parentChainId   String?
  parentChain     AgentChain? @relation("ChainVersions", fields: [parentChainId], references: [id])
  childChains     AgentChain[] @relation("ChainVersions")
  
  @@index([chainType, isActive, isTemplate])
  @@index([name, version])
  @@index([primaryGoal, isActive])
  @@index([averageSuccessRate, executionCount])
  @@index([createdAt, isActive])
  @@map("agent_chains")
}

model ChainExecution {
  id              String      @id @default(cuid())
  chainId         String
  executionNumber Int         // Incremental number for this chain
  
  // Execution context
  triggeredBy     String?     // User ID or system trigger
  triggerType     ChainTriggerType
  triggerData     Json?       // Data that triggered the execution
  
  // Campaign context
  campaignId      String?
  campaignName    String?
  
  // Execution state
  status          ChainExecutionStatus @default(PENDING)
  currentStep     Int         @default(0)
  totalSteps      Int
  
  // Progress tracking
  startedAt       DateTime    @default(now())
  completedAt     DateTime?
  pausedAt        DateTime?
  failedAt        DateTime?
  lastActivity    DateTime    @default(now())
  
  // Performance metrics
  executionTime   Int?        // Total execution time in milliseconds
  totalCost       Float       @default(0.0)
  successRate     Float?      // Overall success rate of this execution
  
  // Results and outputs
  finalResult     Json?       // Aggregated result from all agents
  outputs         Json?       // All outputs from the chain
  errorDetails    Json?       // Error information if failed
  
  // Resource tracking
  agentsUsed      String[]    // List of agents that were executed
  resourcesUsed   Json?       // Detailed resource usage
  
  // Quality and validation
  resultQuality   Float?      // 0.0 to 1.0 quality score
  userFeedback    String?
  userRating      Float?      // 1.0 to 5.0
  
  // Retry and recovery
  retryCount      Int         @default(0)
  parentExecutionId String?
  parentExecution ChainExecution? @relation("ExecutionRetries", fields: [parentExecutionId], references: [id])
  retryExecutions ChainExecution[] @relation("ExecutionRetries")
  
  // Metadata
  executionConfig Json?       // Configuration overrides for this execution
  environment     String      @default("production")
  metadata        Json?
  
  // Relations
  chain           AgentChain  @relation(fields: [chainId], references: [id], onDelete: Cascade)
  campaign        Campaign?   @relation(fields: [campaignId], references: [id])
  steps           ChainStep[]
  handoffs        AgentHandoff[]
  
  @@index([chainId, status, startedAt])
  @@index([campaignId, status, startedAt])
  @@index([status, startedAt])
  @@index([triggerType, startedAt])
  @@index([executionNumber, chainId])
  @@map("chain_executions")
}

model ChainStep {
  id              String      @id @default(cuid())
  executionId     String
  stepNumber      Int         // Order in the chain (0-indexed)
  
  // Step definition
  stepName        String
  stepType        ChainStepType
  agentType       AgentType
  agentName       String?     // Specific agent instance name
  
  // Step configuration
  stepConfig      Json        // Configuration for this step
  inputSchema     Json?       // Expected input format
  outputSchema    Json?       // Expected output format
  
  // Execution state
  status          ChainStepStatus @default(PENDING)
  startedAt       DateTime?
  completedAt     DateTime?
  
  // Performance
  executionTime   Int?        // Execution time in milliseconds
  cost            Float       @default(0.0)
  retryCount      Int         @default(0)
  
  // Data flow
  inputData       Json?       // Input received for this step
  outputData      Json?       // Output produced by this step
  errorData       Json?       // Error information if step failed
  
  // Quality and validation
  confidence      Float?      // Agent's confidence in the output
  qualityScore    Float?      // Quality assessment of the output
  validationResult Json?      // Validation checks performed
  
  // Dependencies and conditions
  dependsOn       Int[]       // Step numbers this step depends on
  conditions      Json?       // Conditions that must be met to execute
  conditionalData Json?       // Data for conditional execution
  
  // Agent-specific data
  agentExecutionId String?    // Reference to agent's execution log
  agentMetrics     Json?      // Metrics from agent execution
  
  // Metadata
  metadata        Json?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relations
  execution       ChainExecution @relation(fields: [executionId], references: [id], onDelete: Cascade)
  handoffsFrom    AgentHandoff[] @relation("HandoffFromStep")
  handoffsTo      AgentHandoff[] @relation("HandoffToStep")
  
  @@index([executionId, stepNumber])
  @@index([agentType, status, startedAt])
  @@index([status, startedAt])
  @@index([stepType, status])
  @@map("chain_steps")
}

model AgentHandoff {
  id              String      @id @default(cuid())
  executionId     String
  fromStepId      String
  toStepId        String
  handoffNumber   Int         // Sequential number for this execution
  
  // Handoff details
  fromAgent       AgentType
  toAgent         AgentType
  handoffType     HandoffType
  protocol        String      @default("standard")
  
  // Data transfer
  handoffData     Json        // Data being passed between agents
  dataSchema      Json?       // Schema validation for the data
  dataSize        Int?        // Size of data in bytes
  compressionUsed Boolean     @default(false)
  
  // Quality and validation
  confidence      Float       @default(0.5)
  qualityScore    Float?      // Quality of the handoff data
  validationPassed Boolean    @default(true)
  validationErrors Json?      // Any validation errors
  
  // Performance tracking
  transferredAt   DateTime    @default(now())
  transferTime    Int?        // Time taken for transfer in milliseconds
  processingTime  Int?        // Time for receiving agent to process
  
  // Context preservation
  contextData     Json?       // Additional context maintained across handoff
  campaignContext Json?       // Campaign-specific context
  userContext     Json?       // User-specific context
  
  // Success and error handling
  success         Boolean     @default(true)
  errorMessage    String?
  retryCount      Int         @default(0)
  
  // Optimization and learning
  optimizationHints Json?     // Hints for the receiving agent
  performanceFeedback Json?   // Feedback on handoff effectiveness
  learningData    Json?       // Data for improving future handoffs
  
  // Metadata
  metadata        Json?
  
  // Relations
  execution       ChainExecution @relation(fields: [executionId], references: [id], onDelete: Cascade)
  fromStep        ChainStep   @relation("HandoffFromStep", fields: [fromStepId], references: [id])
  toStep          ChainStep   @relation("HandoffToStep", fields: [toStepId], references: [id])
  
  @@index([executionId, handoffNumber])
  @@index([fromAgent, toAgent, transferredAt])
  @@index([handoffType, success, transferredAt])
  @@index([transferredAt])
  @@map("agent_handoffs")
}

model ChainTemplate {
  id              String      @id @default(cuid())
  name            String
  description     String      @db.Text
  category        ChainCategory
  
  // Template definition
  templateData    Json        // Complete template definition
  agentTypes      AgentType[] // Types of agents used in this template
  complexity      ChainComplexity @default(SIMPLE)
  
  // Usage and performance
  usageCount      Int         @default(0)
  successRate     Float       @default(0.0)
  averageCost     Float       @default(0.0)
  averageExecutionTime Float  @default(0.0)
  
  // Categorization
  industry        String?
  useCase         String
  tags            String[]
  
  // Validation
  isOfficial      Boolean     @default(false)
  isVerified      Boolean     @default(false)
  verifiedBy      String?
  verifiedAt      DateTime?
  
  // Versioning
  version         String      @default("1.0")
  parentTemplateId String?
  parentTemplate  ChainTemplate? @relation("TemplateVersions", fields: [parentTemplateId], references: [id])
  childTemplates  ChainTemplate[] @relation("TemplateVersions")
  
  // Metadata
  createdBy       String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  @@index([category, complexity])
  @@index([industry, useCase])
  @@index([successRate, usageCount])
  @@index([isOfficial, isVerified])
  @@map("chain_templates")
}

// Enums for Multi-Agent Collaboration

enum ChainType {
  SEQUENTIAL      // Linear chain execution
  PARALLEL        // Parallel execution with synchronization
  CONDITIONAL     // Conditional branching
  LOOP            // Iterative execution
  FEEDBACK        // Feedback loop chains
  HYBRID          // Combination of multiple types
  CUSTOM          // User-defined custom chain
}

enum ChainExecutionMode {
  SEQUENTIAL      // Execute agents one after another
  PARALLEL        // Execute compatible agents in parallel
  ADAPTIVE        // Let system decide based on dependencies
  BATCH           // Execute in batches for efficiency
}

enum ChainTriggerType {
  MANUAL          // Manually triggered by user
  SCHEDULED       // Triggered by scheduler
  EVENT_DRIVEN    // Triggered by specific events
  METRIC_BASED    // Triggered by metric thresholds
  CAMPAIGN_START  // Triggered by campaign launch
  PERFORMANCE     // Triggered by performance conditions
  API_CALL        // Triggered via API
  WEBHOOK         // Triggered by webhook
}

enum ChainExecutionStatus {
  PENDING         // Waiting to start
  RUNNING         // Currently executing
  PAUSED          // Temporarily paused
  COMPLETED       // Successfully completed
  FAILED          // Failed execution
  CANCELLED       // Cancelled by user
  TIMEOUT         // Timed out
  RETRYING        // Currently retrying
}

enum ChainStepType {
  AGENT_EXECUTION // Standard agent execution
  CONDITION_CHECK // Conditional logic evaluation
  DATA_TRANSFORM  // Data transformation step
  PARALLEL_SYNC   // Synchronization point for parallel execution
  LOOP_START      // Start of a loop
  LOOP_END        // End of a loop
  BRANCH_START    // Start of conditional branch
  BRANCH_END      // End of conditional branch
  CUSTOM          // Custom step type
}

enum ChainStepStatus {
  PENDING         // Waiting to execute
  RUNNING         // Currently executing
  COMPLETED       // Successfully completed
  FAILED          // Failed execution
  SKIPPED         // Skipped due to conditions
  RETRYING        // Currently retrying
  BLOCKED         // Blocked by dependencies
}

enum HandoffType {
  DATA_ONLY       // Transfer data only
  DATA_WITH_CONTEXT // Transfer data with context
  FULL_STATE      // Transfer complete state
  SIGNAL_ONLY     // Signal without data
  REFERENCE       // Reference to external data
  STREAMING       // Streaming data transfer
}

enum ChainCategory {
  CONTENT_CREATION
  LEAD_GENERATION
  CAMPAIGN_OPTIMIZATION
  SEO_OPTIMIZATION
  SOCIAL_MEDIA
  EMAIL_MARKETING
  CUSTOMER_SUPPORT
  ANALYTICS
  GENERAL_PURPOSE
  CUSTOM
}

enum ChainComplexity {
  SIMPLE          // 2-3 agents, linear flow
  MODERATE        // 4-5 agents, some branching
  COMPLEX         // 6+ agents, multiple branches
  ADVANCED        // Complex logic, loops, conditions
}

// Enums for Agent Actions

enum ActionType {
  // Campaign management actions
  PAUSE_CAMPAIGN
  RESUME_CAMPAIGN
  STOP_CAMPAIGN
  RESTART_CAMPAIGN
  
  // Budget management actions
  ADJUST_BUDGET_UP
  ADJUST_BUDGET_DOWN
  SET_BUDGET_LIMIT
  RESET_BUDGET
  
  // Content and targeting actions
  REFRESH_CONTENT
  OPTIMIZE_TARGETING
  UPDATE_KEYWORDS
  ADJUST_AUDIENCE
  
  // Notification and escalation actions
  NOTIFY_TEAM
  ESCALATE_ISSUE
  SEND_ALERT
  CREATE_ALERT
  SEND_REPORT
  
  // Agent management actions
  SWITCH_AGENT_MODE
  TRIGGER_BACKUP_AGENT
  RESTART_AGENT
  
  // Performance optimization actions
  AUTO_SCALE_UP
  AUTO_SCALE_DOWN
  UPDATE_STRATEGY
  OPTIMIZE_PERFORMANCE
  
  // Review and scheduling actions
  SCHEDULE_REVIEW
  TRIGGER_ANALYSIS
  
  // Emergency actions
  EMERGENCY_STOP
  ROLLBACK_CHANGES
}

enum ActionPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
  URGENT
}

enum ActionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
  RETRYING
  TIMEOUT
}

// Enums for AgentMetric model

enum MetricTrend {
  INCREASING
  DECREASING
  STABLE
  VOLATILE
  UNKNOWN
}

enum PerformanceLevel {
  POOR
  BELOW_AVERAGE
  AVERAGE
  ABOVE_AVERAGE
  EXCELLENT
  OUTSTANDING
}

enum MetricSource {
  AGENT_DIRECT
  CAMPAIGN_API
  ANALYTICS_ENGINE
  EXTERNAL_API
  USER_INPUT
  CALCULATED
  PREDICTED
}
