import { ExecutiveInsight, CampaignSummary } from '../../../data-model/src';

export interface CampaignSummaryData {
  campaign: CampaignSummary;
  insights: ExecutiveInsight[];
  benchmarkComparison: {
    industryAvgROAS: number;
    industryAvgCTR: number;
    industryAvgConversionRate: number;
  };
  agentPerformanceBreakdown: Array<{
    agentType: string;
    executionCount: number;
    successRate: number;
    contribution: string;
  }>;
  recommendations: string[];
  nextSteps: string[];
}

export class CampaignSummaryTemplate {
  generateMarkdown(data: CampaignSummaryData): string {
    const campaign = data.campaign;
    const duration = campaign.duration || 0;
    const dailySpend = campaign.actualSpend ? campaign.actualSpend / duration : 0;

    return `# 🎯 Campaign Performance Report
## ${campaign.campaignName}

---

## 📊 Campaign Overview

**Campaign Details:**
- **Campaign ID:** ${campaign.campaignId}
- **Type:** ${campaign.campaignType}
- **Duration:** ${duration} days
- **Status:** ${campaign.status}
- **Period:** ${campaign.startDate?.toISOString().split('T')[0]} to ${campaign.endDate?.toISOString().split('T')[0]}

---

## 💰 Financial Performance

| Metric | Value | Industry Benchmark | Performance |
|--------|-------|-------------------|-------------|
| **Total Budget** | $${campaign.totalBudget?.toLocaleString()} | - | - |
| **Actual Spend** | $${campaign.actualSpend?.toLocaleString()} | - | ${this.getBudgetUtilization(campaign)}% utilized |
| **Daily Spend** | $${dailySpend.toFixed(0)} | - | - |
| **Revenue Generated** | $${campaign.revenue.toLocaleString()} | - | - |
| **ROAS** | ${campaign.roas}x | ${data.benchmarkComparison.industryAvgROAS}x | ${this.getPerformanceIndicator(campaign.roas, data.benchmarkComparison.industryAvgROAS)} |
| **Cost per Conversion** | $${campaign.costPerConversion.toFixed(2)} | - | - |

---

## 📈 Engagement Metrics

| Metric | Value | Industry Benchmark | Performance |
|--------|-------|-------------------|-------------|
| **Impressions** | ${campaign.impressions.toLocaleString()} | - | - |
| **Clicks** | ${campaign.clicks.toLocaleString()} | - | - |
| **Click-Through Rate** | ${campaign.ctr.toFixed(2)}% | ${data.benchmarkComparison.industryAvgCTR.toFixed(2)}% | ${this.getPerformanceIndicator(campaign.ctr, data.benchmarkComparison.industryAvgCTR)} |
| **Conversions** | ${campaign.conversions.toLocaleString()} | - | - |
| **Conversion Rate** | ${campaign.conversionRate.toFixed(2)}% | ${data.benchmarkComparison.industryAvgConversionRate.toFixed(2)}% | ${this.getPerformanceIndicator(campaign.conversionRate, data.benchmarkComparison.industryAvgConversionRate)} |

---

## 🤖 Agent Performance Analysis

${data.agentPerformanceBreakdown
  .map(
    agent => `
### ${agent.agentType}
- **Executions:** ${agent.executionCount}
- **Success Rate:** ${(agent.successRate * 100).toFixed(1)}%
- **Contribution:** ${agent.contribution}
`
  )
  .join('\n')}

**Total Execution Time:** ${campaign.totalExecutionTime} minutes

---

## 🎨 Brand Alignment Score

**Brand Consistency:** ${(campaign.brandAlignmentScore * 100).toFixed(1)}%

${
  campaign.brandConsistencyIssues
    ? `
**Issues Identified:**
${JSON.stringify(campaign.brandConsistencyIssues, null, 2)}
`
    : '✅ No brand consistency issues detected'
}

---

## 🔍 Key Insights

${data.insights
  .map(
    insight => `
### ${insight.title}
**Priority:** ${insight.priority} | **Impact:** ${insight.businessImpact.toFixed(
      0
    )}% | **Confidence:** ${(insight.confidence * 100).toFixed(0)}%

${insight.summary}

**Recommendations:**
${insight.recommendations.map(rec => `- ${rec}`).join('\n')}

---
`
  )
  .join('\n')}

## 📋 Action Items & Next Steps

### Immediate Actions
${data.recommendations
  .slice(0, 5)
  .map(rec => `- ${rec}`)
  .join('\n')}

### Strategic Next Steps
${data.nextSteps.map(step => `- ${step}`).join('\n')}

---

## 🔄 Replication Potential

${
  campaign.replayCount > 0
    ? `
**Replay History:** This campaign has been successfully replicated ${campaign.replayCount} times.

**Identified Success Patterns:**
${
  campaign.patternsIdentified
    ? Object.keys(campaign.patternsIdentified)
        .map(pattern => `- ${pattern}: ${JSON.stringify(campaign.patternsIdentified[pattern])}`)
        .join('\n')
    : 'No specific patterns documented'
}
`
    : 'This campaign has not been replicated yet.'
}

---

*Report generated by NeonHub Campaign Intelligence Engine*
*Overall Campaign Grade: ${this.calculateCampaignGrade(campaign, data.benchmarkComparison)}*
`;
  }

  generateHTML(data: CampaignSummaryData): string {
    const campaign = data.campaign;
    const duration = campaign.duration || 0;
    const dailySpend = campaign.actualSpend ? campaign.actualSpend / duration : 0;

    return `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Campaign Performance Report - ${campaign.campaignName}</title>
    <style>
        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: linear-gradient(135deg, #0A0A0A 0%, #1A1A2E 100%);
            color: #E5E7EB;
            margin: 0;
            padding: 20px;
            line-height: 1.6;
        }
        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 40px;
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
        }
        .header {
            text-align: center;
            margin-bottom: 40px;
        }
        h1 {
            color: #00D2FF;
            font-size: 2.5rem;
            margin-bottom: 10px;
            text-shadow: 0 0 20px rgba(0, 210, 255, 0.3);
        }
        .campaign-status {
            display: inline-block;
            padding: 8px 16px;
            border-radius: 20px;
            font-weight: bold;
            background: ${this.getStatusColor(campaign.status)};
            color: white;
        }
        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin: 30px 0;
        }
        .metric-card {
            background: rgba(0, 210, 255, 0.1);
            border: 1px solid rgba(0, 210, 255, 0.3);
            border-radius: 15px;
            padding: 20px;
            text-align: center;
        }
        .metric-value {
            font-size: 2.5rem;
            font-weight: bold;
            color: #00D2FF;
            margin-bottom: 5px;
        }
        .metric-label {
            color: #9CA3AF;
            font-size: 0.9rem;
        }
        .performance-table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
            background: rgba(255, 255, 255, 0.03);
            border-radius: 10px;
            overflow: hidden;
        }
        .performance-table th,
        .performance-table td {
            padding: 15px;
            text-align: left;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }
        .performance-table th {
            background: rgba(0, 210, 255, 0.2);
            color: #00D2FF;
            font-weight: bold;
        }
        .performance-indicator {
            padding: 4px 8px;
            border-radius: 6px;
            font-size: 0.8rem;
            font-weight: bold;
        }
        .outperforming {
            background: #10B981;
            color: white;
        }
        .underperforming {
            background: #EF4444;
            color: white;
        }
        .meeting {
            background: #F59E0B;
            color: white;
        }
        .agent-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }
        .agent-card {
            background: linear-gradient(135deg, rgba(0, 210, 255, 0.1) 0%, rgba(138, 43, 226, 0.1) 100%);
            border-radius: 15px;
            padding: 20px;
            border: 1px solid rgba(0, 210, 255, 0.2);
        }
        .insight-card {
            background: rgba(255, 255, 255, 0.05);
            border-left: 4px solid #00D2FF;
            border-radius: 10px;
            padding: 20px;
            margin: 20px 0;
        }
        .critical { border-left-color: #FF6B6B; }
        .high { border-left-color: #FFD93D; }
        .medium { border-left-color: #00D2FF; }
        .grade-display {
            text-align: center;
            font-size: 3rem;
            font-weight: bold;
            color: #00D2FF;
            text-shadow: 0 0 30px rgba(0, 210, 255, 0.5);
            margin: 30px 0;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🎯 Campaign Performance Report</h1>
            <h2 style="color: #9CA3AF; margin-top: 0;">${campaign.campaignName}</h2>
            <div class="campaign-status">${campaign.status}</div>
        </div>

        <div class="metrics-grid">
            <div class="metric-card">
                <div class="metric-value">$${campaign.revenue.toLocaleString()}</div>
                <div class="metric-label">Total Revenue</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">${campaign.roas}x</div>
                <div class="metric-label">Return on Ad Spend</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">${campaign.conversions.toLocaleString()}</div>
                <div class="metric-label">Conversions</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">${campaign.conversionRate.toFixed(2)}%</div>
                <div class="metric-label">Conversion Rate</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">${(campaign.brandAlignmentScore * 100).toFixed(1)}%</div>
                <div class="metric-label">Brand Alignment</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">${duration}</div>
                <div class="metric-label">Campaign Duration (days)</div>
            </div>
        </div>

        <h2 style="color: #00D2FF;">📊 Performance vs. Industry Benchmarks</h2>
        <table class="performance-table">
            <thead>
                <tr>
                    <th>Metric</th>
                    <th>Campaign</th>
                    <th>Industry Avg</th>
                    <th>Performance</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>ROAS</td>
                    <td>${campaign.roas}x</td>
                    <td>${data.benchmarkComparison.industryAvgROAS}x</td>
                    <td><span class="performance-indicator ${this.getPerformanceClass(campaign.roas, data.benchmarkComparison.industryAvgROAS)}">${this.getPerformanceIndicator(campaign.roas, data.benchmarkComparison.industryAvgROAS)}</span></td>
                </tr>
                <tr>
                    <td>Click-Through Rate</td>
                    <td>${campaign.ctr.toFixed(2)}%</td>
                    <td>${data.benchmarkComparison.industryAvgCTR.toFixed(2)}%</td>
                    <td><span class="performance-indicator ${this.getPerformanceClass(campaign.ctr, data.benchmarkComparison.industryAvgCTR)}">${this.getPerformanceIndicator(campaign.ctr, data.benchmarkComparison.industryAvgCTR)}</span></td>
                </tr>
                <tr>
                    <td>Conversion Rate</td>
                    <td>${campaign.conversionRate.toFixed(2)}%</td>
                    <td>${data.benchmarkComparison.industryAvgConversionRate.toFixed(2)}%</td>
                    <td><span class="performance-indicator ${this.getPerformanceClass(campaign.conversionRate, data.benchmarkComparison.industryAvgConversionRate)}">${this.getPerformanceIndicator(campaign.conversionRate, data.benchmarkComparison.industryAvgConversionRate)}</span></td>
                </tr>
            </tbody>
        </table>

        <h2 style="color: #00D2FF;">🤖 Agent Performance Breakdown</h2>
        <div class="agent-grid">
            ${data.agentPerformanceBreakdown
              .map(
                agent => `
                <div class="agent-card">
                    <h3 style="margin: 0 0 15px 0; color: #00D2FF;">${agent.agentType}</h3>
                    <div style="margin-bottom: 10px;"><strong>Executions:</strong> ${agent.executionCount}</div>
                    <div style="margin-bottom: 10px;"><strong>Success Rate:</strong> ${(agent.successRate * 100).toFixed(1)}%</div>
                    <div><strong>Contribution:</strong> ${agent.contribution}</div>
                </div>
            `
              )
              .join('')}
        </div>

        <h2 style="color: #00D2FF;">🔍 Key Insights</h2>
        ${data.insights
          .map(
            insight => `
            <div class="insight-card ${insight.priority.toLowerCase()}">
                <h3>${insight.title}</h3>
                <p><strong>Priority:</strong> ${insight.priority} | <strong>Impact:</strong> ${(insight.businessImpact * 100).toFixed(0)}% | <strong>Confidence:</strong> ${(insight.confidence * 100).toFixed(0)}%</p>
                <p>${insight.summary}</p>
                <div style="background: rgba(0, 210, 255, 0.05); border-radius: 8px; padding: 15px; margin-top: 15px;">
                    <strong>Recommendations:</strong>
                    <ul>
                        ${insight.recommendations.map(rec => `<li>${rec}</li>`).join('')}
                    </ul>
                </div>
            </div>
        `
          )
          .join('')}

        <div class="grade-display">
            Campaign Grade: ${this.calculateCampaignGrade(campaign, data.benchmarkComparison)}
        </div>

        <div style="text-align: center; margin-top: 40px; color: #9CA3AF;">
            <p><em>Report generated by NeonHub Campaign Intelligence Engine</em></p>
        </div>
    </div>
</body>
</html>
    `;
  }

  private getBudgetUtilization(campaign: CampaignSummary): number {
    if (!campaign.totalBudget || !campaign.actualSpend) return 0;
    return Math.round((campaign.actualSpend / campaign.totalBudget) * 100);
  }

  private getPerformanceIndicator(actual: number, benchmark: number): string {
    const ratio = actual / benchmark;
    if (ratio >= 1.2) return '🟢 Outperforming';
    if (ratio >= 0.9) return '🟡 Meeting Expectations';
    return '🔴 Below Benchmark';
  }

  private getPerformanceClass(actual: number, benchmark: number): string {
    const ratio = actual / benchmark;
    if (ratio >= 1.2) return 'outperforming';
    if (ratio >= 0.9) return 'meeting';
    return 'underperforming';
  }

  private getStatusColor(status: string): string {
    const colors = {
      COMPLETED: '#10B981',
      ACTIVE: '#3B82F6',
      PAUSED: '#F59E0B',
      FAILED: '#EF4444',
    };
    return colors[status] || '#6B7280';
  }

  private calculateCampaignGrade(campaign: CampaignSummary, benchmark: any): string {
    let score = 0;
    let factors = 0;

    // ROAS scoring
    if (campaign.roas >= benchmark.industryAvgROAS * 1.5) score += 25;
    else if (campaign.roas >= benchmark.industryAvgROAS * 1.2) score += 20;
    else if (campaign.roas >= benchmark.industryAvgROAS) score += 15;
    else score += 10;
    factors++;

    // Conversion rate scoring
    if (campaign.conversionRate >= benchmark.industryAvgConversionRate * 1.3) score += 25;
    else if (campaign.conversionRate >= benchmark.industryAvgConversionRate * 1.1) score += 20;
    else if (campaign.conversionRate >= benchmark.industryAvgConversionRate) score += 15;
    else score += 10;
    factors++;

    // Brand alignment scoring
    if (campaign.brandAlignmentScore >= 0.9) score += 25;
    else if (campaign.brandAlignmentScore >= 0.8) score += 20;
    else if (campaign.brandAlignmentScore >= 0.7) score += 15;
    else score += 10;
    factors++;

    // CTR scoring
    if (campaign.ctr >= benchmark.industryAvgCTR * 1.5) score += 25;
    else if (campaign.ctr >= benchmark.industryAvgCTR * 1.2) score += 20;
    else if (campaign.ctr >= benchmark.industryAvgCTR) score += 15;
    else score += 10;
    factors++;

    const avgScore = score / factors;

    if (avgScore >= 23) return 'A+';
    if (avgScore >= 20) return 'A';
    if (avgScore >= 18) return 'B+';
    if (avgScore >= 15) return 'B';
    if (avgScore >= 12) return 'C+';
    if (avgScore >= 10) return 'C';
    return 'D';
  }
}
