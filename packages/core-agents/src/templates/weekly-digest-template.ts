import { ExecutiveInsight, ExecutiveReport } from '../../../data-model/src';

export interface WeeklyDigestData {
  insights: ExecutiveInsight[];
  weeklyMetrics: {
    totalCampaigns: number;
    totalRevenue: number;
    avgROAS: number;
    topPerformingAgent: string;
    brandAlignmentScore: number;
  };
  keyHighlights: string[];
  criticalAlerts: ExecutiveInsight[];
  upcomingOpportunities: string[];
}

export class WeeklyDigestTemplate {
  generateMarkdown(data: WeeklyDigestData): string {
    const currentWeek = new Date().toISOString().split('T')[0];

    return `# üìä NeonHub Weekly Intelligence Digest
*Week of ${currentWeek}*

---

## üî• Executive Summary

**Key Performance Indicators:**
- **Campaigns Active:** ${data.weeklyMetrics.totalCampaigns}
- **Weekly Revenue:** $${data.weeklyMetrics.totalRevenue.toLocaleString()}
- **Average ROAS:** ${data.weeklyMetrics.avgROAS}x
- **Brand Alignment:** ${(data.weeklyMetrics.brandAlignmentScore * 100).toFixed(1)}%
- **Top Agent:** ${data.weeklyMetrics.topPerformingAgent}

---

## üéØ Weekly Highlights

${data.keyHighlights.map(highlight => `- ${highlight}`).join('\n')}

---

## ‚ö° Critical Insights & Actions

${data.criticalAlerts
  .map(
    alert => `
### ${alert.priority === 'CRITICAL' ? 'üö®' : '‚ö†Ô∏è'} ${alert.title}
**Impact Score:** ${(alert.businessImpact * 100).toFixed(0)}% | **Confidence:** ${(alert.confidence * 100).toFixed(0)}%

${alert.summary}

**Recommended Actions:**
${alert.recommendations.map(rec => `- ${rec}`).join('\n')}

---
`
  )
  .join('\n')}

## üìà Performance Deep Dive

${this.generatePerformanceSection(data.insights)}

## üîÆ Opportunity Radar

${data.upcomingOpportunities.map(opp => `- ${opp}`).join('\n')}

---

## üéÆ Agent Performance Leaderboard

${this.generateAgentLeaderboard(data.insights)}

---

*Generated by NeonHub Executive Intelligence Engine*
*Confidence Level: ${this.calculateOverallConfidence(data.insights).toFixed(1)}%*
`;
  }

  generateHTML(data: WeeklyDigestData): string {
    const currentWeek = new Date().toISOString().split('T')[0];

    return `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NeonHub Weekly Intelligence Digest</title>
    <style>
        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: linear-gradient(135deg, #0A0A0A 0%, #1A1A2E 100%);
            color: #E5E7EB;
            margin: 0;
            padding: 20px;
            line-height: 1.6;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 40px;
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
        }
        h1 {
            color: #00D2FF;
            font-size: 2.5rem;
            margin-bottom: 10px;
            text-shadow: 0 0 20px rgba(0, 210, 255, 0.3);
        }
        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin: 30px 0;
        }
        .metric-card {
            background: rgba(0, 210, 255, 0.1);
            border: 1px solid rgba(0, 210, 255, 0.3);
            border-radius: 15px;
            padding: 20px;
            text-align: center;
        }
        .metric-value {
            font-size: 2rem;
            font-weight: bold;
            color: #00D2FF;
        }
        .insight-card {
            background: rgba(255, 255, 255, 0.05);
            border-left: 4px solid #00D2FF;
            border-radius: 10px;
            padding: 20px;
            margin: 20px 0;
        }
        .critical {
            border-left-color: #FF6B6B;
            background: rgba(255, 107, 107, 0.1);
        }
        .high {
            border-left-color: #FFD93D;
            background: rgba(255, 217, 61, 0.1);
        }
        .recommendations {
            background: rgba(0, 210, 255, 0.05);
            border-radius: 10px;
            padding: 15px;
            margin-top: 15px;
        }
        .agent-leaderboard {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 15px;
            margin-top: 20px;
        }
        .agent-card {
            background: linear-gradient(135deg, rgba(0, 210, 255, 0.1) 0%, rgba(138, 43, 226, 0.1) 100%);
            border-radius: 15px;
            padding: 20px;
            border: 1px solid rgba(0, 210, 255, 0.2);
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üìä NeonHub Weekly Intelligence Digest</h1>
        <p style="color: #9CA3AF; font-size: 1.1rem;">Week of ${currentWeek}</p>
        
        <div class="metrics-grid">
            <div class="metric-card">
                <div class="metric-value">${data.weeklyMetrics.totalCampaigns}</div>
                <div>Active Campaigns</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">$${data.weeklyMetrics.totalRevenue.toLocaleString()}</div>
                <div>Weekly Revenue</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">${data.weeklyMetrics.avgROAS}x</div>
                <div>Average ROAS</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">${(data.weeklyMetrics.brandAlignmentScore * 100).toFixed(1)}%</div>
                <div>Brand Alignment</div>
            </div>
        </div>

        <h2 style="color: #00D2FF;">üéØ Weekly Highlights</h2>
        <ul>
            ${data.keyHighlights.map(highlight => `<li>${highlight}</li>`).join('')}
        </ul>

        <h2 style="color: #00D2FF;">‚ö° Critical Insights & Actions</h2>
        ${data.criticalAlerts
          .map(
            alert => `
            <div class="insight-card ${alert.priority.toLowerCase()}">
                <h3>${alert.priority === 'CRITICAL' ? 'üö®' : '‚ö†Ô∏è'} ${alert.title}</h3>
                <p><strong>Impact:</strong> ${(alert.businessImpact * 100).toFixed(0)}% | <strong>Confidence:</strong> ${(alert.confidence * 100).toFixed(0)}%</p>
                <p>${alert.summary}</p>
                <div class="recommendations">
                    <strong>Recommended Actions:</strong>
                    <ul>
                        ${alert.recommendations.map(rec => `<li>${rec}</li>`).join('')}
                    </ul>
                </div>
            </div>
        `
          )
          .join('')}

        <h2 style="color: #00D2FF;">üéÆ Agent Performance Leaderboard</h2>
        <div class="agent-leaderboard">
            ${this.generateAgentLeaderboardHTML(data.insights)}
        </div>

        <div style="text-align: center; margin-top: 40px; color: #9CA3AF;">
            <p><em>Generated by NeonHub Executive Intelligence Engine</em></p>
            <p><strong>Confidence Level: ${this.calculateOverallConfidence(data.insights).toFixed(1)}%</strong></p>
        </div>
    </div>
</body>
</html>
    `;
  }

  private generatePerformanceSection(insights: ExecutiveInsight[]): string {
    const performanceInsights = insights.filter(i => i.category === 'PERFORMANCE');

    return performanceInsights
      .map(
        insight => `
### ${insight.title}
*Business Impact: ${(insight.businessImpact * 100).toFixed(0)}%*

${insight.summary}
`
      )
      .join('\n');
  }

  private generateAgentLeaderboard(insights: ExecutiveInsight[]): string {
    const agentInsights = insights.filter(i => i.affectedAgents.length > 0);
    const agentScores = new Map<string, number>();

    agentInsights.forEach(insight => {
      insight.affectedAgents.forEach(agent => {
        const currentScore = agentScores.get(agent) || 0;
        agentScores.set(agent, currentScore + insight.businessImpact);
      });
    });

    const sortedAgents = Array.from(agentScores.entries())
      .sort((a, b) => b[1] - a[1])
      .slice(0, 5);

    return sortedAgents
      .map((agent, index) => `${index + 1}. **${agent[0]}** - Impact Score: ${agent[1].toFixed(2)}`)
      .join('\n');
  }

  private generateAgentLeaderboardHTML(insights: ExecutiveInsight[]): string {
    const agentInsights = insights.filter(i => i.affectedAgents.length > 0);
    const agentScores = new Map<string, number>();

    agentInsights.forEach(insight => {
      insight.affectedAgents.forEach(agent => {
        const currentScore = agentScores.get(agent) || 0;
        agentScores.set(agent, currentScore + insight.businessImpact);
      });
    });

    const sortedAgents = Array.from(agentScores.entries())
      .sort((a, b) => b[1] - a[1])
      .slice(0, 6);

    return sortedAgents
      .map(
        (agent, index) => `
      <div class="agent-card">
        <h4 style="margin: 0 0 10px 0; color: #00D2FF;">#${index + 1} ${agent[0]}</h4>
        <div style="font-size: 1.5rem; font-weight: bold;">${agent[1].toFixed(2)}</div>
        <div style="color: #9CA3AF;">Impact Score</div>
      </div>
    `
      )
      .join('');
  }

  private calculateOverallConfidence(insights: ExecutiveInsight[]): number {
    if (insights.length === 0) return 0;
    return (insights.reduce((sum, insight) => sum + insight.confidence, 0) / insights.length) * 100;
  }
}
