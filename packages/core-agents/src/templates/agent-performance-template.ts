import { ExecutiveInsight, AgentPerformanceLog } from '../../../data-model/src';

export interface AgentPerformanceData {
  agents: any[];
  insights: any[];
  systemMetrics: {
    totalAgents: number;
    averageSuccessRate: number;
    totalExecutions: number;
    totalCost: number;
    topPerformer: string;
    underperformers: string[];
  };
  collaborationMatrix: Array<{
    agentPair: [string, string];
    collaborationCount: number;
    successRate: number;
    impactScore: number;
  }>;
  recommendations: string[];
  optimizationOpportunities: Array<{
    agentType: string;
    opportunity: string;
    expectedImprovement: string;
    priority: 'HIGH' | 'MEDIUM' | 'LOW';
  }>;
}

export class AgentPerformanceTemplate {
  generateMarkdown(data: AgentPerformanceData): string {
    const reportDate = new Date().toISOString().split('T')[0];

    return `# 🤖 Agent Performance & Optimization Report
*Generated: ${reportDate}*

## 📊 System Overview

**Agent Ecosystem Metrics:**
- **Total Active Agents:** ${data.systemMetrics.totalAgents}
- **System Success Rate:** ${(data.systemMetrics.averageSuccessRate * 100).toFixed(1)}%
- **Total Executions:** ${data.systemMetrics.totalExecutions.toLocaleString()}
- **Total System Cost:** $${data.systemMetrics.totalCost.toLocaleString()}
- **Top Performer:** ${data.systemMetrics.topPerformer}

## 🏆 Individual Agent Performance

${data.agents
  .map(
    agent => `
### ${agent.agentType}
**Performance Grade:** ${this.calculateAgentGrade(agent)}

| Metric | Value | Status |
|--------|-------|--------|
| **Success Rate** | ${(agent.goalSuccessRate * 100).toFixed(1)}% | ${this.getSuccessRateStatus(agent.goalSuccessRate)} |
| **Impact Score** | ${agent.impactScore.toFixed(2)} | ${this.getImpactStatus(agent.impactScore)} |
| **Cost Efficiency** | $${agent.costPerExecution.toFixed(2)} | ${this.getCostEfficiencyStatus(agent.costPerExecution)} |
`
  )
  .join('\n')}

*Report generated by NeonHub Agent Performance Intelligence*
`;
  }

  generateHTML(data: AgentPerformanceData): string {
    return `
<!DOCTYPE html>
<html>
<head>
    <title>Agent Performance Report</title>
    <style>
        body { font-family: Arial, sans-serif; background: #0A0A0A; color: #E5E7EB; padding: 20px; }
        .container { max-width: 1200px; margin: 0 auto; background: rgba(255,255,255,0.05); padding: 40px; border-radius: 20px; }
        h1 { color: #00D2FF; text-align: center; }
        .metric-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin: 30px 0; }
        .metric-card { background: rgba(0,210,255,0.1); border-radius: 15px; padding: 20px; text-align: center; }
        .metric-value { font-size: 2rem; font-weight: bold; color: #00D2FF; }
    </style>
</head>
<body>
    <div class="container">
        <h1>🤖 Agent Performance Report</h1>
        <div class="metric-grid">
            <div class="metric-card">
                <div class="metric-value">${data.systemMetrics.totalAgents}</div>
                <div>Active Agents</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">${(data.systemMetrics.averageSuccessRate * 100).toFixed(1)}%</div>
                <div>Success Rate</div>
            </div>
        </div>
    </div>
</body>
</html>
    `;
  }

  private calculateAgentGrade(agent: any): string {
    const successRate = agent.goalSuccessRate || 0;
    if (successRate >= 0.9) return 'A+';
    if (successRate >= 0.8) return 'A';
    if (successRate >= 0.7) return 'B';
    return 'C';
  }

  private getSuccessRateStatus(rate: number): string {
    if (rate >= 0.9) return '🟢 Excellent';
    if (rate >= 0.8) return '🟡 Good';
    return '🔴 Needs Improvement';
  }

  private getImpactStatus(score: number): string {
    if (score >= 0.85) return '🟢 High Impact';
    if (score >= 0.7) return '🟡 Moderate Impact';
    return '🔴 Low Impact';
  }

  private getCostEfficiencyStatus(cost: number): string {
    if (cost <= 2.0) return '🟢 Efficient';
    if (cost <= 3.5) return '🟡 Moderate';
    return '🔴 Expensive';
  }
}
