export interface BrandAuditData {
  overallScore: number;
  campaigns: Array<{
    id: string;
    name: string;
    brandScore: number;
    issues: string[];
    strengths: string[];
  }>;
  issueBreakdown: {
    tone: number;
    visual: number;
    messaging: number;
    consistency: number;
  };
  recommendations: string[];
  trendAnalysis: Array<{
    month: string;
    score: number;
    improvement: number;
  }>;
}

export class BrandAuditTemplate {
  generateMarkdown(data: BrandAuditData): string {
    const reportDate = new Date().toISOString().split('T')[0];

    return `# 🎨 Brand Consistency Audit Report
*Generated: ${reportDate}*

## 📊 Overall Brand Health

**System Brand Alignment Score: ${(data.overallScore * 100).toFixed(1)}%**

${this.getBrandHealthStatus(data.overallScore)}

## 📈 Campaign Brand Performance

${data.campaigns
  .map(
    campaign => `
### ${campaign.name}
**Brand Score:** ${(campaign.brandScore * 100).toFixed(1)}% ${this.getScoreEmoji(campaign.brandScore)}

**Strengths:**
${campaign.strengths.map(strength => `- ✅ ${strength}`).join('\n')}

${
  campaign.issues.length > 0
    ? `
**Issues to Address:**
${campaign.issues.map(issue => `- ⚠️ ${issue}`).join('\n')}
`
    : '**No issues detected** ✨'
}

---
`
  )
  .join('\n')}

## 🔍 Issue Analysis

| Category | Issue Count | Impact Level |
|----------|------------|--------------|
| **Tone Consistency** | ${data.issueBreakdown.tone} | ${this.getImpactLevel(data.issueBreakdown.tone)} |
| **Visual Alignment** | ${data.issueBreakdown.visual} | ${this.getImpactLevel(data.issueBreakdown.visual)} |
| **Messaging Coherence** | ${data.issueBreakdown.messaging} | ${this.getImpactLevel(data.issueBreakdown.messaging)} |
| **Overall Consistency** | ${data.issueBreakdown.consistency} | ${this.getImpactLevel(data.issueBreakdown.consistency)} |

## 🎯 Recommendations

${data.recommendations.map((rec, index) => `${index + 1}. ${rec}`).join('\n')}

## 📅 Trend Analysis

${data.trendAnalysis
  .map(
    trend => `
**${trend.month}:** ${trend.score.toFixed(1)}% ${trend.improvement > 0 ? `(+${trend.improvement.toFixed(1)}% improvement)` : trend.improvement < 0 ? `(${trend.improvement.toFixed(1)}% decline)` : '(no change)'}`
  )
  .join('\n')}

---

*Report generated by NeonHub Brand Intelligence Engine*
*Brand Health Grade: ${this.calculateBrandGrade(data.overallScore)}*
`;
  }

  generateHTML(data: BrandAuditData): string {
    return `
<!DOCTYPE html>
<html>
<head>
    <title>Brand Consistency Audit</title>
    <style>
        body { font-family: Arial, sans-serif; background: #0A0A0A; color: #E5E7EB; padding: 20px; }
        .container { max-width: 1200px; margin: 0 auto; background: rgba(255,255,255,0.05); padding: 40px; border-radius: 20px; }
        h1 { color: #00D2FF; text-align: center; }
        .score-display { text-align: center; font-size: 3rem; color: #00D2FF; margin: 30px 0; }
        .campaign-grid { display: grid; gap: 20px; margin: 30px 0; }
        .campaign-card { background: rgba(0,210,255,0.1); border-radius: 15px; padding: 20px; }
        .score-excellent { color: #10B981; }
        .score-good { color: #F59E0B; }
        .score-needs-work { color: #EF4444; }
    </style>
</head>
<body>
    <div class="container">
        <h1>🎨 Brand Consistency Audit</h1>
        <div class="score-display">${(data.overallScore * 100).toFixed(1)}%</div>
        <p style="text-align: center; font-size: 1.2rem;">${this.getBrandHealthStatus(data.overallScore)}</p>
        
        <h2 style="color: #00D2FF;">Campaign Performance</h2>
        <div class="campaign-grid">
            ${data.campaigns
              .map(
                campaign => `
                <div class="campaign-card">
                    <h3>${campaign.name}</h3>
                    <div class="${this.getScoreClass(campaign.brandScore)}">Brand Score: ${(campaign.brandScore * 100).toFixed(1)}%</div>
                    <div><strong>Strengths:</strong> ${campaign.strengths.length}</div>
                    <div><strong>Issues:</strong> ${campaign.issues.length}</div>
                </div>
            `
              )
              .join('')}
        </div>
    </div>
</body>
</html>
    `;
  }

  private getBrandHealthStatus(score: number): string {
    if (score >= 0.9) return '🟢 Excellent brand consistency across all touchpoints';
    if (score >= 0.8) return '🟡 Good brand alignment with minor optimization opportunities';
    if (score >= 0.7) return '🟠 Moderate brand consistency requiring attention';
    return '🔴 Brand alignment needs immediate improvement';
  }

  private getScoreEmoji(score: number): string {
    if (score >= 0.9) return '🟢';
    if (score >= 0.8) return '🟡';
    return '🔴';
  }

  private getScoreClass(score: number): string {
    if (score >= 0.9) return 'score-excellent';
    if (score >= 0.8) return 'score-good';
    return 'score-needs-work';
  }

  private getImpactLevel(count: number): string {
    if (count >= 5) return '🔴 High';
    if (count >= 3) return '🟡 Medium';
    if (count >= 1) return '🟠 Low';
    return '🟢 None';
  }

  private calculateBrandGrade(score: number): string {
    if (score >= 0.95) return 'A+';
    if (score >= 0.9) return 'A';
    if (score >= 0.85) return 'B+';
    if (score >= 0.8) return 'B';
    if (score >= 0.75) return 'C+';
    if (score >= 0.7) return 'C';
    return 'D';
  }
}
