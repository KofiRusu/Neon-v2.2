name: Production Health Check & Auto-Scale Monitoring

on:
  # Disabled auto health checks - only manual execution allowed
  # schedule:
  #   - cron: "*/15 * * * *" # Every 15 minutes
  workflow_dispatch:
  # push:
  #   branches: [main]

env:
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}

jobs:
  health-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "neonui0.3/package-lock.json"

      - name: Install dependencies
        working-directory: neonui0.3
        run: npm ci

      - name: Build application
        working-directory: neonui0.3
        run: npm run build

      - name: Run health checks
        id: health
        run: |
          # Health endpoint check
          health_response=$(curl -s -o /dev/null -w "%{http_code},%{time_total}" https://neonhub-production.vercel.app/api/trpc/health.ping || echo "000,999")
          health_code=$(echo $health_response | cut -d',' -f1)
          health_time=$(echo $health_response | cut -d',' -f2)

          # System status check
          status_response=$(curl -s -o /dev/null -w "%{http_code},%{time_total}" https://neonhub-production.vercel.app/api/status || echo "000,999")
          status_code=$(echo $status_response | cut -d',' -f1)
          status_time=$(echo $status_response | cut -d',' -f2)

          # Homepage check
          home_response=$(curl -s -o /dev/null -w "%{http_code},%{time_total}" https://neonhub-production.vercel.app/ || echo "000,999")
          home_code=$(echo $home_response | cut -d',' -f1)
          home_time=$(echo $home_response | cut -d',' -f2)

          echo "health_code=$health_code" >> $GITHUB_OUTPUT
          echo "health_time=$health_time" >> $GITHUB_OUTPUT
          echo "status_code=$status_code" >> $GITHUB_OUTPUT
          echo "status_time=$status_time" >> $GITHUB_OUTPUT
          echo "home_code=$home_code" >> $GITHUB_OUTPUT
          echo "home_time=$home_time" >> $GITHUB_OUTPUT

          # Check if any endpoint failed
          if [ "$health_code" != "200" ] || [ "$status_code" != "200" ] || [ "$home_code" != "200" ]; then
            echo "health_status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Check if response times are too slow (>2 seconds)
          if (( $(echo "$health_time > 2.0" | bc -l) )) || (( $(echo "$status_time > 2.0" | bc -l) )) || (( $(echo "$home_time > 2.0" | bc -l) )); then
            echo "performance_status=degraded" >> $GITHUB_OUTPUT
            echo "Performance degraded: Health=${health_time}s, Status=${status_time}s, Home=${home_time}s"
          else
            echo "health_status=healthy" >> $GITHUB_OUTPUT
            echo "performance_status=optimal" >> $GITHUB_OUTPUT
          fi

      - name: Performance monitoring
        id: performance
        run: |
          # Get system metrics
          metrics=$(curl -s https://neonhub-production.vercel.app/api/status | jq -r '.performance.memoryUsage.used, .performance.responseTime, .performance.uptime.seconds' | tr '\n' ',' | sed 's/,$//')
          memory=$(echo $metrics | cut -d',' -f1)
          response_time=$(echo $metrics | cut -d',' -f2)
          uptime=$(echo $metrics | cut -d',' -f3)

          echo "memory_usage=$memory" >> $GITHUB_OUTPUT
          echo "response_time=$response_time" >> $GITHUB_OUTPUT
          echo "uptime=$uptime" >> $GITHUB_OUTPUT

          # Check performance thresholds
          if (( $(echo "$memory > 400" | bc -l) )); then
            echo "memory_alert=true" >> $GITHUB_OUTPUT
            echo "High memory usage detected: ${memory}MB"
          fi

          if (( $(echo "$response_time > 500" | bc -l) )); then
            echo "response_alert=true" >> $GITHUB_OUTPUT
            echo "Slow response time detected: ${response_time}ms"
          fi

      - name: Lighthouse performance audit
        id: lighthouse
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: "./neonui0.3/lighthouse.config.js"
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Auto-scaling check
        id: scaling
        run: |
          # Simulate load testing to check scaling
          echo "Running auto-scaling validation..."

          # Basic load test with 10 concurrent requests
          for i in {1..10}; do
            curl -s -o /dev/null https://neonhub-production.vercel.app/api/trpc/health.ping &
          done
          wait

          echo "Auto-scaling test completed - Vercel handles scaling automatically"
          echo "scaling_status=verified" >> $GITHUB_OUTPUT

      - name: Generate health report
        run: |
          cat > health-report.md << EOF
          # 📊 Health Check Report
          **Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          **Build**: ${{ github.sha }}

          ## 🏥 Endpoint Health
          - **Health API**: ${{ steps.health.outputs.health_code }} (${{ steps.health.outputs.health_time }}s)
          - **Status API**: ${{ steps.health.outputs.status_code }} (${{ steps.health.outputs.status_time }}s)  
          - **Homepage**: ${{ steps.health.outputs.home_code }} (${{ steps.health.outputs.home_time }}s)

          ## 📈 Performance Metrics
          - **Memory Usage**: ${{ steps.performance.outputs.memory_usage }}MB
          - **Response Time**: ${{ steps.performance.outputs.response_time }}ms
          - **Uptime**: ${{ steps.performance.outputs.uptime }} seconds

          ## 🚀 Auto-Scaling
          - **Status**: ${{ steps.scaling.outputs.scaling_status }}
          - **Platform**: Vercel serverless functions (auto-scaling enabled)

          ## 🎯 Status Summary
          - **Overall Health**: ${{ steps.health.outputs.health_status }}
          - **Performance**: ${{ steps.performance.outputs.performance_status }}
          - **Scaling**: Ready for high traffic loads
          EOF

      - name: Upload health report
        uses: actions/upload-artifact@v4
        with:
          name: health-report-${{ github.run_number }}
          path: health-report.md

      # Disabled mobile notifications
      # - name: Notify on health failure
      #   if: failure() || steps.health.outputs.health_status == 'failed'
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: failure
      #     text: |
      #       🚨 NeonHub Health Check Failed
      #       Health Check Status: FAILED
      #       Build: ${{ github.sha }}
      #       Health API: ${{ steps.health.outputs.health_code }}
      #       Status API: ${{ steps.health.outputs.status_code }}
      #       Homepage: ${{ steps.health.outputs.home_code }}

      #       Action Required: Check system status immediately
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      # - name: Notify on performance degradation
      #   if: steps.performance.outputs.memory_alert == 'true' || steps.performance.outputs.response_alert == 'true'
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: warning
      #     text: |
      #       ⚠️ NeonHub Performance Alert
      #       Performance Degradation Detected
      #       Memory Usage: ${{ steps.performance.outputs.memory_usage }}MB
      #       Response Time: ${{ steps.performance.outputs.response_time }}ms

      #       Consider scaling or optimization
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Success notification
        if: success() && steps.health.outputs.health_status == 'healthy'
        run: |
          echo "✅ All health checks passed successfully"
          echo "🚀 System operating normally with auto-scaling enabled"
          echo "📊 Performance metrics within acceptable ranges"
