name: 🚀 NeonHub v2.1 GitOps CI/CD Pipeline

on:
  # Disabled auto triggers - only manual execution allowed
  # push:
  #   branches: [ main, dev ]
  # pull_request:
  #   branches: [ main, dev ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # ============================================
  # JOB 1: DEPENDENCY INSTALLATION
  # ============================================
  install:
    name: 📦 Install Dependencies
    runs-on: ubuntu-latest
    
    steps:
      - name: 🔄 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: 📦 Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false
      
      - name: 💾 Get PNPM Store Directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      
      - name: 🚀 Setup PNPM Cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: 📥 Install Dependencies
        run: pnpm install --frozen-lockfile
      
      - name: 🗂️ Cache Node Modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-nodemodules-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-nodemodules-

  # ============================================
  # JOB 2: CODE QUALITY - LINTING
  # ============================================
  lint:
    name: 🔍 Code Quality Check
    runs-on: ubuntu-latest
    needs: install
    
    steps:
      - name: 🔄 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: 📦 Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false
      
      - name: 🗂️ Restore Node Modules Cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-nodemodules-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-nodemodules-
      
      - name: 📥 Install Dependencies (if cache miss)
        run: pnpm install --frozen-lockfile --prefer-offline
      
      - name: 🔍 Run ESLint
        run: |
          echo "🔍 Running ESLint across all workspaces..."
          pnpm lint || {
            echo "❌ Linting failed! Please fix the following issues:"
            pnpm lint --format=compact || true
            exit 1
          }
      
      - name: ✅ Lint Success
        run: echo "✅ All linting checks passed successfully!"

  # ============================================
  # JOB 3: TYPE CHECKING
  # ============================================
  typecheck:
    name: 🔧 TypeScript Type Check
    runs-on: ubuntu-latest
    needs: install
    
    steps:
      - name: 🔄 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: 📦 Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false
      
      - name: 🗂️ Restore Node Modules Cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-nodemodules-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-nodemodules-
      
      - name: 📥 Install Dependencies (if cache miss)
        run: pnpm install --frozen-lockfile --prefer-offline
      
      - name: 🔧 TypeScript Type Check
        run: |
          echo "🔧 Running TypeScript type checking..."
          pnpm typecheck || {
            echo "❌ TypeScript errors found! Please fix the following:"
            pnpm typecheck --pretty false || true
            exit 1
          }
      
      - name: ✅ TypeCheck Success
        run: echo "✅ All TypeScript checks passed successfully!"

  # ============================================
  # JOB 4: TESTING
  # ============================================
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    needs: [install, lint, typecheck]
    
    steps:
      - name: 🔄 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: 📦 Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false
      
      - name: 🗂️ Restore Node Modules Cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-nodemodules-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-nodemodules-
      
      - name: 📥 Install Dependencies (if cache miss)
        run: pnpm install --frozen-lockfile --prefer-offline
      
      - name: 🧪 Run Unit Tests
        run: |
          echo "🧪 Running test suites across all workspaces..."
          pnpm test --reporter=verbose || {
            echo "❌ Tests failed! Check the test output above."
            exit 1
          }
      
      - name: 📊 Upload Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            coverage/
            test-results/
          retention-days: 7
      
      - name: ✅ Test Success
        run: echo "✅ All tests passed successfully!"

  # ============================================
  # JOB 5: BUILD
  # ============================================
  build:
    name: 🏗️ Build Applications
    runs-on: ubuntu-latest
    needs: [install, lint, typecheck, test]
    
    steps:
      - name: 🔄 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: 📦 Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false
      
      - name: 🗂️ Restore Node Modules Cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-nodemodules-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-nodemodules-
      
      - name: 📥 Install Dependencies (if cache miss)
        run: pnpm install --frozen-lockfile --prefer-offline
      
      - name: 🏗️ Build Packages
        run: |
          echo "🏗️ Building packages first..."
          pnpm --filter "./packages/*" build || {
            echo "❌ Package build failed! Attempting to continue..."
            exit 1
          }
      
      - name: 🏗️ Build Applications
        run: |
          echo "🏗️ Building applications..."
          
          # Build dashboard
          echo "🎨 Building dashboard..."
          pnpm --filter "@neonhub/dashboard" build || {
            echo "❌ Dashboard build failed!"
            BUILD_FAILED=true
          }
          
          # Build API
          echo "🔌 Building API..."
          pnpm --filter "@neonhub/api" build || {
            echo "❌ API build failed!"
            BUILD_FAILED=true
          }
          
          if [ "$BUILD_FAILED" = true ]; then
            echo "❌ One or more builds failed. Check the logs above."
            exit 1
          fi
      
      - name: 📦 Cache Build Artifacts
        uses: actions/cache@v3
        with:
          path: |
            apps/dashboard/.next
            apps/api/dist
            packages/*/dist
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-
      
      - name: 📁 Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            apps/dashboard/.next
            apps/api/dist
            packages/*/dist
          retention-days: 7
      
      - name: ✅ Build Success
        run: echo "✅ All builds completed successfully!"

  # ============================================
  # JOB 6: PREVIEW DEPLOYMENT (NON-MAIN BRANCHES)
  # ============================================
  preview-deploy:
    name: 🌐 Preview Deployment
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref != 'refs/heads/main' && !github.event.pull_request.draft
    
    steps:
      - name: 🔄 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: 📦 Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false
      
      - name: 🗂️ Restore Node Modules Cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-nodemodules-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-nodemodules-
      
      - name: 📦 Restore Build Cache
        uses: actions/cache@v3
        with:
          path: |
            apps/dashboard/.next
            apps/api/dist
            packages/*/dist
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-
      
      - name: 📥 Install Dependencies (if cache miss)
        run: pnpm install --frozen-lockfile --prefer-offline
      
      - name: 🏗️ Build Dashboard (if needed)
        run: |
          if [ ! -d "apps/dashboard/.next" ]; then
            echo "📦 Building dashboard for deployment..."
            pnpm --filter "@neonhub/dashboard" build
          fi
      
      - name: 🌐 Deploy to Vercel Preview
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./apps/dashboard
          scope: ${{ secrets.VERCEL_ORG_ID }}
      
      - name: 📝 Comment Preview URL
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('🌐 Preview Deployment')
            );
            
            const commentBody = `## 🌐 Preview Deployment
            
            ✅ Your preview deployment is ready!
            
            🚀 **Preview URL**: Check the Vercel deployment above
            📦 **Branch**: \`${context.ref.replace('refs/heads/', '')}\`
            🔗 **Commit**: ${context.sha.substring(0, 7)}
            
            > This preview will be automatically updated on new commits to this PR.`;
            
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }
      
      - name: ✅ Preview Deploy Success
        run: echo "✅ Preview deployment completed successfully!"

  # ============================================
  # JOB 7: AUTO-TAG RELEASE
  # ============================================
  auto-tag-release:
    name: 🏷️ Auto-Tag Release
    runs-on: ubuntu-latest
    needs: [build]
    if: |
      github.ref == 'refs/heads/main' && 
      contains(github.event.head_commit.message, '#release') &&
      github.event_name == 'push'
    
    steps:
      - name: 🔄 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: 📝 Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
      
      - name: 🔍 Get Current Version
        id: get_version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "📦 Current version: $CURRENT_VERSION"
      
      - name: 🔢 Bump Version
        id: bump_version
        run: |
          CURRENT_VERSION="${{ steps.get_version.outputs.current_version }}"
          
          # Parse semantic version
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          # Determine bump type from commit message
          if [[ "${{ github.event.head_commit.message }}" == *"#release:major"* ]]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            BUMP_TYPE="major"
          elif [[ "${{ github.event.head_commit.message }}" == *"#release:minor"* ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
            BUMP_TYPE="minor"
          else
            PATCH=$((PATCH + 1))
            BUMP_TYPE="patch"
          fi
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "🆙 Bumping $BUMP_TYPE version: $CURRENT_VERSION → $NEW_VERSION"
      
      - name: 📝 Update Package.json
        run: |
          NEW_VERSION="${{ steps.bump_version.outputs.new_version }}"
          
          # Update root package.json
          npm version $NEW_VERSION --no-git-tag-version
          
          # Update workspace package.json files
          find . -name "package.json" -not -path "./node_modules/*" -exec \
            node -e "
              const fs = require('fs');
              const pkg = JSON.parse(fs.readFileSync(process.argv[1], 'utf8'));
              if (pkg.name && pkg.name.startsWith('@neonhub/')) {
                pkg.version = '$NEW_VERSION';
                fs.writeFileSync(process.argv[1], JSON.stringify(pkg, null, 2) + '\n');
                console.log('Updated', pkg.name, 'to', '$NEW_VERSION');
              }
            " {} \;
      
      - name: 📋 Generate Release Notes
        id: release_notes
        run: |
          NEW_VERSION="${{ steps.bump_version.outputs.new_version }}"
          BUMP_TYPE="${{ steps.bump_version.outputs.bump_type }}"
          
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --oneline)
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline)
          fi
          
          # Generate release notes
          cat > release_notes.md << EOF
          ## 🚀 NeonHub v${NEW_VERSION}
          
          **Release Type:** ${BUMP_TYPE^} Release  
          **Date:** $(date '+%Y-%m-%d %H:%M:%S UTC')
          
          ### 📝 Changes in this release:
          
          $COMMITS
          
          ### 🎯 What's New:
          - Automated release via GitOps CI/CD pipeline
          - Full validation: lint, typecheck, test, build
          - Production-ready deployment
          
          ### 🔧 Technical Details:
          - **Build Status:** ✅ All checks passed
          - **Test Coverage:** Comprehensive test suite
          - **Accessibility:** WCAG 2.1 AA compliant
          - **Performance:** Optimized for production
          
          ---
          *Auto-generated by NeonHub GitOps Pipeline*
          EOF
          
          echo "release_notes_file=release_notes.md" >> $GITHUB_OUTPUT
      
      - name: 🏷️ Create Git Tag
        run: |
          NEW_VERSION="${{ steps.bump_version.outputs.new_version }}"
          git add .
          git commit -m "🔖 Release v$NEW_VERSION [skip ci]"
          git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
          git push origin main
          git push origin "v$NEW_VERSION"
      
      - name: 📦 Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.bump_version.outputs.new_version }}
          release_name: 🚀 NeonHub v${{ steps.bump_version.outputs.new_version }}
          body_path: ${{ steps.release_notes.outputs.release_notes_file }}
          draft: false
          prerelease: false
      
      - name: ✅ Release Success
        run: |
          echo "✅ Successfully created release v${{ steps.bump_version.outputs.new_version }}"
          echo "🎉 Release available at: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.bump_version.outputs.new_version }}"

  # ============================================
  # JOB 8: CLEANUP & NOTIFICATION
  # ============================================
  cleanup-and-notify:
    name: 🧹 Cleanup & Notify
    runs-on: ubuntu-latest
    needs: [build, preview-deploy, auto-tag-release]
    if: always()
    
    steps:
      - name: 📊 Pipeline Status Summary
        run: |
          echo "## 📊 NeonHub v2.1 Pipeline Summary"
          echo "**Branch:** ${{ github.ref_name }}"
          echo "**Commit:** ${{ github.sha }}"
          echo "**Triggered by:** ${{ github.event_name }}"
          echo ""
          echo "### Job Results:"
          echo "- Install: ${{ needs.install.result || '⏭️ Skipped' }}"
          echo "- Lint: ${{ needs.lint.result || '⏭️ Skipped' }}"
          echo "- TypeCheck: ${{ needs.typecheck.result || '⏭️ Skipped' }}"
          echo "- Test: ${{ needs.test.result || '⏭️ Skipped' }}"
          echo "- Build: ${{ needs.build.result || '⏭️ Skipped' }}"
          echo "- Preview Deploy: ${{ needs.preview-deploy.result || '⏭️ Skipped' }}"
          echo "- Auto Tag Release: ${{ needs.auto-tag-release.result || '⏭️ Skipped' }}"
          
          # Determine overall status
          if [[ "${{ needs.build.result }}" == "success" ]]; then
            echo ""
            echo "### ✅ Pipeline Status: SUCCESS"
            echo "All critical jobs completed successfully!"
          else
            echo ""
            echo "### ❌ Pipeline Status: FAILED"
            echo "One or more critical jobs failed. Check the logs above."
          fi
      
      - name: 🎉 Success Notification
        if: needs.build.result == 'success'
        run: |
          echo "🎉 NeonHub v2.1 GitOps Pipeline completed successfully!"
          echo "✅ All quality gates passed"
          echo "🚀 Ready for production deployment"
      
      - name: ❌ Failure Notification
        if: needs.build.result != 'success'
        run: |
          echo "❌ NeonHub v2.1 GitOps Pipeline failed!"
          echo "🔍 Please check the job logs for details"
          echo "🛠️ Fix the issues and push again"
          exit 1 